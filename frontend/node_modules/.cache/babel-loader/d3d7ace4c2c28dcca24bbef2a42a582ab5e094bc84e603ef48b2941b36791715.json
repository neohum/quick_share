{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport axios from 'axios';\nimport io from 'socket.io-client';\nexport default {\n  name: 'RoomView',\n  data() {\n    return {\n      roomCode: this.$route.params.roomId,\n      expiresIn: 3600,\n      timerInterval: null,\n      apiUrl: process.env.VUE_APP_API_URL || 'http://localhost:3001',\n      socketUrl: process.env.VUE_APP_SOCKET_URL || 'http://localhost:3001',\n      socket: null,\n      selectedFile: null,\n      isUploading: false,\n      uploadError: '',\n      uploadSuccess: '',\n      files: [],\n      isLoading: false\n    };\n  },\n  async created() {\n    await this.checkRoomStatus();\n    this.startExpiryTimer();\n    this.loadFiles();\n    this.connectSocket();\n  },\n  beforeDestroy() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval);\n    }\n\n    // Socket.IO 연결 해제\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  },\n  methods: {\n    async checkRoomStatus() {\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/status`);\n        if (!response.data.active) {\n          this.navigateToHome();\n          alert('방이 만료되었습니다.');\n          return;\n        }\n        this.expiresIn = response.data.expiresIn;\n      } catch (error) {\n        console.error('방 상태 확인 실패:', error);\n        this.navigateToHome();\n      }\n    },\n    navigateToHome() {\n      // 중복 이동 오류 처리\n      this.$router.push('/').catch(err => {\n        if (err.name !== 'NavigationDuplicated') {\n          throw err;\n        }\n      });\n    },\n    startExpiryTimer() {\n      this.timerInterval = setInterval(() => {\n        this.expiresIn--;\n        if (this.expiresIn <= 0) {\n          clearInterval(this.timerInterval);\n          this.navigateToHome();\n          alert('방이 만료되었습니다.');\n        } else if (this.expiresIn % 60 === 0) {\n          // 1분마다 서버에서 실제 만료 시간 확인\n          this.checkRoomStatus();\n        }\n      }, 1000);\n    },\n    formatTime(seconds) {\n      const hours = Math.floor(seconds / 3600);\n      const minutes = Math.floor(seconds % 3600 / 60);\n      const remainingSeconds = seconds % 60;\n      return `${hours}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n    },\n    // 파일 업로드 관련 메서드\n    handleFileChange(event) {\n      this.selectedFile = event.target.files[0] || null;\n      this.uploadError = '';\n      this.uploadSuccess = '';\n    },\n    async uploadFile() {\n      if (!this.selectedFile) {\n        this.uploadError = '업로드할 파일을 선택해주세요.';\n        return;\n      }\n      this.isUploading = true;\n      this.uploadError = '';\n      this.uploadSuccess = '';\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      try {\n        const response = await axios.post(`${this.apiUrl}/api/rooms/${this.roomCode}/files`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        this.uploadSuccess = response.data.message || '파일이 성공적으로 업로드되었습니다.';\n        this.selectedFile = null;\n        this.$refs.fileInput.value = '';\n\n        // 파일 목록 새로고침\n        this.loadFiles();\n      } catch (error) {\n        console.error('파일 업로드 오류:', error);\n        this.uploadError = error.response?.data?.message || '파일 업로드에 실패했습니다.';\n      } finally {\n        this.isUploading = false;\n      }\n    },\n    // 파일 목록 관련 메서드\n    async loadFiles() {\n      this.isLoading = true;\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/files`);\n        this.files = response.data.files || [];\n      } catch (error) {\n        console.error('파일 목록 로드 오류:', error);\n        this.files = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    // 파일 다운로드 메서드\n    downloadFile(file) {\n      // 다운로드 URL 생성\n      const downloadUrl = `${this.apiUrl}/api/rooms/${this.roomCode}/files/${file.filename}`;\n\n      // 방법 1: 새 창에서 직접 다운로드 링크 열기\n      window.open(downloadUrl, '_blank');\n\n      // 방법 2: a 태그를 사용하여 다운로드\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.target = '_blank';\n      link.download = file.originalName; // 이 속성은 일부 브라우저에서만 작동할 수 있음\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n    // 파일 크기 포맷팅\n    formatFileSize(bytes) {\n      if (bytes === 0) return '0 Bytes';\n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    },\n    // 날짜 포맷팅\n    formatDate(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    },\n    // Socket.IO 연결 관련 메서드\n    connectSocket() {\n      // Socket.IO 연결 생성\n      this.socket = io(this.socketUrl);\n\n      // 연결 이벤트\n      this.socket.on('connect', () => {\n        console.log('Socket.IO 연결 성공');\n\n        // 방에 참여\n        this.socket.emit('joinRoom', this.roomCode);\n      });\n\n      // 파일 업로드 이벤트\n      this.socket.on('fileUploaded', data => {\n        console.log('새 파일 업로드 알림 수신:', data);\n\n        // 파일 목록에 새 파일 추가\n        const existingFile = this.files.find(file => file.filename === data.file.filename);\n        if (!existingFile) {\n          this.files.push(data.file);\n        }\n      });\n\n      // 연결 오류 이벤트\n      this.socket.on('connect_error', error => {\n        console.error('Socket.IO 연결 오류:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","io","name","data","roomCode","$route","params","roomId","expiresIn","timerInterval","apiUrl","process","env","VUE_APP_API_URL","socketUrl","VUE_APP_SOCKET_URL","socket","selectedFile","isUploading","uploadError","uploadSuccess","files","isLoading","created","checkRoomStatus","startExpiryTimer","loadFiles","connectSocket","beforeDestroy","clearInterval","disconnect","methods","response","get","active","navigateToHome","alert","error","console","$router","push","catch","err","setInterval","formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","String","padStart","handleFileChange","event","target","uploadFile","formData","FormData","append","post","headers","message","$refs","fileInput","value","downloadFile","file","downloadUrl","filename","window","open","link","document","createElement","href","download","originalName","body","appendChild","click","removeChild","formatFileSize","bytes","k","sizes","i","log","parseFloat","pow","toFixed","formatDate","timestamp","date","Date","toLocaleString","on","emit","existingFile","find"],"sources":["src/views/RoomView.vue"],"sourcesContent":["<template>\n  <div class=\"room\">\n    <div class=\"room-header\">\n      <h2>방 코드: {{ roomCode }}</h2>\n      <div class=\"expiry-timer\" :class=\"{ 'expiry-warning': expiresIn < 600 }\">\n        남은 시간: {{ formatTime(expiresIn) }}\n      </div>\n    </div>\n\n    <div class=\"room-content\">\n      <!-- 파일 업로드 영역 -->\n      <div class=\"file-upload-section\">\n        <h3>파일 업로드</h3>\n        <div class=\"upload-form\">\n          <input\n            type=\"file\"\n            ref=\"fileInput\"\n            @change=\"handleFileChange\"\n            class=\"file-input\"\n          />\n          <button\n            @click=\"uploadFile\"\n            :disabled=\"!selectedFile || isUploading\"\n            class=\"upload-button\"\n          >\n            {{ isUploading ? '업로드 중...' : '업로드' }}\n          </button>\n        </div>\n        <div v-if=\"uploadError\" class=\"error-message\">\n          {{ uploadError }}\n        </div>\n        <div v-if=\"uploadSuccess\" class=\"success-message\">\n          {{ uploadSuccess }}\n        </div>\n      </div>\n\n      <!-- 파일 목록 영역 -->\n      <div class=\"file-list-section\">\n        <h3>공유된 파일</h3>\n        <button @click=\"loadFiles\" class=\"refresh-button\">\n          새로고침\n        </button>\n        <div v-if=\"isLoading\" class=\"loading-message\">\n          파일 목록을 불러오는 중...\n        </div>\n        <div v-else-if=\"files.length === 0\" class=\"empty-message\">\n          공유된 파일이 없습니다.\n        </div>\n        <ul v-else class=\"file-list\">\n          <li v-for=\"file in files\" :key=\"file.filename\" class=\"file-item\">\n            <div class=\"file-info\">\n              <span class=\"file-name\">{{ file.originalName }}</span>\n              <span class=\"file-size\">{{ formatFileSize(file.size) }}</span>\n              <span class=\"file-date\">{{ formatDate(file.uploadedAt) }}</span>\n            </div>\n            <button @click=\"downloadFile(file)\" class=\"download-button\">\n              다운로드\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport io from 'socket.io-client'\n\nexport default {\n  name: 'RoomView',\n  data() {\n    return {\n      roomCode: this.$route.params.roomId,\n      expiresIn: 3600,\n      timerInterval: null,\n      apiUrl: process.env.VUE_APP_API_URL || 'http://localhost:3001',\n      socketUrl: process.env.VUE_APP_SOCKET_URL || 'http://localhost:3001',\n      socket: null,\n      selectedFile: null,\n      isUploading: false,\n      uploadError: '',\n      uploadSuccess: '',\n      files: [],\n      isLoading: false\n    }\n  },\n  async created() {\n    await this.checkRoomStatus()\n    this.startExpiryTimer()\n    this.loadFiles()\n    this.connectSocket()\n  },\n  beforeDestroy() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval)\n    }\n\n    // Socket.IO 연결 해제\n    if (this.socket) {\n      this.socket.disconnect()\n    }\n  },\n  methods: {\n    async checkRoomStatus() {\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/status`)\n        if (!response.data.active) {\n          this.navigateToHome()\n          alert('방이 만료되었습니다.')\n          return\n        }\n        this.expiresIn = response.data.expiresIn\n      } catch (error) {\n        console.error('방 상태 확인 실패:', error)\n        this.navigateToHome()\n      }\n    },\n    navigateToHome() {\n      // 중복 이동 오류 처리\n      this.$router.push('/').catch(err => {\n        if (err.name !== 'NavigationDuplicated') {\n          throw err\n        }\n      })\n    },\n    startExpiryTimer() {\n      this.timerInterval = setInterval(() => {\n        this.expiresIn--\n        if (this.expiresIn <= 0) {\n          clearInterval(this.timerInterval)\n          this.navigateToHome()\n          alert('방이 만료되었습니다.')\n        } else if (this.expiresIn % 60 === 0) {\n          // 1분마다 서버에서 실제 만료 시간 확인\n          this.checkRoomStatus()\n        }\n      }, 1000)\n    },\n    formatTime(seconds) {\n      const hours = Math.floor(seconds / 3600)\n      const minutes = Math.floor((seconds % 3600) / 60)\n      const remainingSeconds = seconds % 60\n\n      return `${hours}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`\n    },\n\n    // 파일 업로드 관련 메서드\n    handleFileChange(event) {\n      this.selectedFile = event.target.files[0] || null\n      this.uploadError = ''\n      this.uploadSuccess = ''\n    },\n\n    async uploadFile() {\n      if (!this.selectedFile) {\n        this.uploadError = '업로드할 파일을 선택해주세요.'\n        return\n      }\n\n      this.isUploading = true\n      this.uploadError = ''\n      this.uploadSuccess = ''\n\n      const formData = new FormData()\n      formData.append('file', this.selectedFile)\n\n      try {\n        const response = await axios.post(\n          `${this.apiUrl}/api/rooms/${this.roomCode}/files`,\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }\n        )\n\n        this.uploadSuccess = response.data.message || '파일이 성공적으로 업로드되었습니다.'\n        this.selectedFile = null\n        this.$refs.fileInput.value = ''\n\n        // 파일 목록 새로고침\n        this.loadFiles()\n      } catch (error) {\n        console.error('파일 업로드 오류:', error)\n        this.uploadError = error.response?.data?.message || '파일 업로드에 실패했습니다.'\n      } finally {\n        this.isUploading = false\n      }\n    },\n\n    // 파일 목록 관련 메서드\n    async loadFiles() {\n      this.isLoading = true\n\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/files`)\n        this.files = response.data.files || []\n      } catch (error) {\n        console.error('파일 목록 로드 오류:', error)\n        this.files = []\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    // 파일 다운로드 메서드\n    downloadFile(file) {\n      // 다운로드 URL 생성\n      const downloadUrl = `${this.apiUrl}/api/rooms/${this.roomCode}/files/${file.filename}`\n\n      // 방법 1: 새 창에서 직접 다운로드 링크 열기\n      window.open(downloadUrl, '_blank')\n\n      // 방법 2: a 태그를 사용하여 다운로드\n      const link = document.createElement('a')\n      link.href = downloadUrl\n      link.target = '_blank'\n      link.download = file.originalName // 이 속성은 일부 브라우저에서만 작동할 수 있음\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n    },\n\n    // 파일 크기 포맷팅\n    formatFileSize(bytes) {\n      if (bytes === 0) return '0 Bytes'\n\n      const k = 1024\n      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n      const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n    },\n\n    // 날짜 포맷팅\n    formatDate(timestamp) {\n      const date = new Date(timestamp)\n      return date.toLocaleString()\n    },\n\n    // Socket.IO 연결 관련 메서드\n    connectSocket() {\n      // Socket.IO 연결 생성\n      this.socket = io(this.socketUrl)\n\n      // 연결 이벤트\n      this.socket.on('connect', () => {\n        console.log('Socket.IO 연결 성공')\n\n        // 방에 참여\n        this.socket.emit('joinRoom', this.roomCode)\n      })\n\n      // 파일 업로드 이벤트\n      this.socket.on('fileUploaded', (data) => {\n        console.log('새 파일 업로드 알림 수신:', data)\n\n        // 파일 목록에 새 파일 추가\n        const existingFile = this.files.find(file => file.filename === data.file.filename)\n        if (!existingFile) {\n          this.files.push(data.file)\n        }\n      })\n\n      // 연결 오류 이벤트\n      this.socket.on('connect_error', (error) => {\n        console.error('Socket.IO 연결 오류:', error)\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.room {\n  padding: 20px;\n}\n\n.room-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 20px;\n  background-color: #f5f5f5;\n  margin-bottom: 20px;\n  border-radius: 8px;\n}\n\n.expiry-timer {\n  font-family: monospace;\n  padding: 5px 10px;\n  border-radius: 4px;\n  background-color: #e0e0e0;\n}\n\n.expiry-warning {\n  background-color: #ffebee;\n  color: #c62828;\n  animation: pulse 2s infinite;\n}\n\n.room-content {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n}\n\n.file-upload-section,\n.file-list-section {\n  background-color: #f9f9f9;\n  padding: 20px;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.upload-form {\n  display: flex;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n.file-input {\n  flex: 1;\n  padding: 8px;\n  border: 1px solid #ddd;\n  border-radius: 4px 0 0 4px;\n}\n\n.upload-button {\n  padding: 8px 16px;\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  border-radius: 0 4px 4px 0;\n  cursor: pointer;\n}\n\n.upload-button:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.error-message {\n  color: #f44336;\n  margin-top: 10px;\n}\n\n.success-message {\n  color: #4caf50;\n  margin-top: 10px;\n}\n\n.refresh-button {\n  padding: 5px 10px;\n  background-color: #2196f3;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  margin-left: 10px;\n}\n\n.loading-message,\n.empty-message {\n  margin-top: 10px;\n  color: #757575;\n  font-style: italic;\n}\n\n.file-list {\n  list-style: none;\n  padding: 0;\n  margin-top: 15px;\n}\n\n.file-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  border: 1px solid #e0e0e0;\n  border-radius: 4px;\n  margin-bottom: 8px;\n  background-color: white;\n}\n\n.file-info {\n  display: flex;\n  flex-direction: column;\n}\n\n.file-name {\n  font-weight: bold;\n  margin-bottom: 5px;\n}\n\n.file-size,\n.file-date {\n  font-size: 0.8em;\n  color: #757575;\n}\n\n.download-button {\n  padding: 5px 10px;\n  background-color: #2196f3;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n@keyframes pulse {\n  0% { opacity: 1; }\n  50% { opacity: 0.5; }\n  100% { opacity: 1; }\n}\n\n@media (max-width: 768px) {\n  .room-content {\n    grid-template-columns: 1fr;\n  }\n}\n</style>\n"],"mappings":";;;AAkEA,OAAAA,KAAA;AACA,OAAAC,EAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA,OAAAC,MAAA,CAAAC,MAAA,CAAAC,MAAA;MACAC,SAAA;MACAC,aAAA;MACAC,MAAA,EAAAC,OAAA,CAAAC,GAAA,CAAAC,eAAA;MACAC,SAAA,EAAAH,OAAA,CAAAC,GAAA,CAAAG,kBAAA;MACAC,MAAA;MACAC,YAAA;MACAC,WAAA;MACAC,WAAA;MACAC,aAAA;MACAC,KAAA;MACAC,SAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAAC,eAAA;IACA,KAAAC,gBAAA;IACA,KAAAC,SAAA;IACA,KAAAC,aAAA;EACA;EACAC,cAAA;IACA,SAAAnB,aAAA;MACAoB,aAAA,MAAApB,aAAA;IACA;;IAEA;IACA,SAAAO,MAAA;MACA,KAAAA,MAAA,CAAAc,UAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAP,gBAAA;MACA;QACA,MAAAQ,QAAA,SAAAhC,KAAA,CAAAiC,GAAA,SAAAvB,MAAA,mBAAAN,QAAA;QACA,KAAA4B,QAAA,CAAA7B,IAAA,CAAA+B,MAAA;UACA,KAAAC,cAAA;UACAC,KAAA;UACA;QACA;QACA,KAAA5B,SAAA,GAAAwB,QAAA,CAAA7B,IAAA,CAAAK,SAAA;MACA,SAAA6B,KAAA;QACAC,OAAA,CAAAD,KAAA,gBAAAA,KAAA;QACA,KAAAF,cAAA;MACA;IACA;IACAA,eAAA;MACA;MACA,KAAAI,OAAA,CAAAC,IAAA,MAAAC,KAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAxC,IAAA;UACA,MAAAwC,GAAA;QACA;MACA;IACA;IACAjB,iBAAA;MACA,KAAAhB,aAAA,GAAAkC,WAAA;QACA,KAAAnC,SAAA;QACA,SAAAA,SAAA;UACAqB,aAAA,MAAApB,aAAA;UACA,KAAA0B,cAAA;UACAC,KAAA;QACA,gBAAA5B,SAAA;UACA;UACA,KAAAgB,eAAA;QACA;MACA;IACA;IACAoB,WAAAC,OAAA;MACA,MAAAC,KAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAH,OAAA;MACA,MAAAI,OAAA,GAAAF,IAAA,CAAAC,KAAA,CAAAH,OAAA;MACA,MAAAK,gBAAA,GAAAL,OAAA;MAEA,UAAAC,KAAA,IAAAK,MAAA,CAAAF,OAAA,EAAAG,QAAA,YAAAD,MAAA,CAAAD,gBAAA,EAAAE,QAAA;IACA;IAEA;IACAC,iBAAAC,KAAA;MACA,KAAArC,YAAA,GAAAqC,KAAA,CAAAC,MAAA,CAAAlC,KAAA;MACA,KAAAF,WAAA;MACA,KAAAC,aAAA;IACA;IAEA,MAAAoC,WAAA;MACA,UAAAvC,YAAA;QACA,KAAAE,WAAA;QACA;MACA;MAEA,KAAAD,WAAA;MACA,KAAAC,WAAA;MACA,KAAAC,aAAA;MAEA,MAAAqC,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,cAAA1C,YAAA;MAEA;QACA,MAAAe,QAAA,SAAAhC,KAAA,CAAA4D,IAAA,CACA,QAAAlD,MAAA,mBAAAN,QAAA,UACAqD,QAAA,EACA;UACAI,OAAA;YACA;UACA;QACA,CACA;QAEA,KAAAzC,aAAA,GAAAY,QAAA,CAAA7B,IAAA,CAAA2D,OAAA;QACA,KAAA7C,YAAA;QACA,KAAA8C,KAAA,CAAAC,SAAA,CAAAC,KAAA;;QAEA;QACA,KAAAvC,SAAA;MACA,SAAAW,KAAA;QACAC,OAAA,CAAAD,KAAA,eAAAA,KAAA;QACA,KAAAlB,WAAA,GAAAkB,KAAA,CAAAL,QAAA,EAAA7B,IAAA,EAAA2D,OAAA;MACA;QACA,KAAA5C,WAAA;MACA;IACA;IAEA;IACA,MAAAQ,UAAA;MACA,KAAAJ,SAAA;MAEA;QACA,MAAAU,QAAA,SAAAhC,KAAA,CAAAiC,GAAA,SAAAvB,MAAA,mBAAAN,QAAA;QACA,KAAAiB,KAAA,GAAAW,QAAA,CAAA7B,IAAA,CAAAkB,KAAA;MACA,SAAAgB,KAAA;QACAC,OAAA,CAAAD,KAAA,iBAAAA,KAAA;QACA,KAAAhB,KAAA;MACA;QACA,KAAAC,SAAA;MACA;IACA;IAEA;IACA4C,aAAAC,IAAA;MACA;MACA,MAAAC,WAAA,WAAA1D,MAAA,mBAAAN,QAAA,UAAA+D,IAAA,CAAAE,QAAA;;MAEA;MACAC,MAAA,CAAAC,IAAA,CAAAH,WAAA;;MAEA;MACA,MAAAI,IAAA,GAAAC,QAAA,CAAAC,aAAA;MACAF,IAAA,CAAAG,IAAA,GAAAP,WAAA;MACAI,IAAA,CAAAjB,MAAA;MACAiB,IAAA,CAAAI,QAAA,GAAAT,IAAA,CAAAU,YAAA;MACAJ,QAAA,CAAAK,IAAA,CAAAC,WAAA,CAAAP,IAAA;MACAA,IAAA,CAAAQ,KAAA;MACAP,QAAA,CAAAK,IAAA,CAAAG,WAAA,CAAAT,IAAA;IACA;IAEA;IACAU,eAAAC,KAAA;MACA,IAAAA,KAAA;MAEA,MAAAC,CAAA;MACA,MAAAC,KAAA;MACA,MAAAC,CAAA,GAAAvC,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAwC,GAAA,CAAAJ,KAAA,IAAApC,IAAA,CAAAwC,GAAA,CAAAH,CAAA;MAEA,OAAAI,UAAA,EAAAL,KAAA,GAAApC,IAAA,CAAA0C,GAAA,CAAAL,CAAA,EAAAE,CAAA,GAAAI,OAAA,aAAAL,KAAA,CAAAC,CAAA;IACA;IAEA;IACAK,WAAAC,SAAA;MACA,MAAAC,IAAA,OAAAC,IAAA,CAAAF,SAAA;MACA,OAAAC,IAAA,CAAAE,cAAA;IACA;IAEA;IACApE,cAAA;MACA;MACA,KAAAX,MAAA,GAAAf,EAAA,MAAAa,SAAA;;MAEA;MACA,KAAAE,MAAA,CAAAgF,EAAA;QACA1D,OAAA,CAAAiD,GAAA;;QAEA;QACA,KAAAvE,MAAA,CAAAiF,IAAA,kBAAA7F,QAAA;MACA;;MAEA;MACA,KAAAY,MAAA,CAAAgF,EAAA,iBAAA7F,IAAA;QACAmC,OAAA,CAAAiD,GAAA,oBAAApF,IAAA;;QAEA;QACA,MAAA+F,YAAA,QAAA7E,KAAA,CAAA8E,IAAA,CAAAhC,IAAA,IAAAA,IAAA,CAAAE,QAAA,KAAAlE,IAAA,CAAAgE,IAAA,CAAAE,QAAA;QACA,KAAA6B,YAAA;UACA,KAAA7E,KAAA,CAAAmB,IAAA,CAAArC,IAAA,CAAAgE,IAAA;QACA;MACA;;MAEA;MACA,KAAAnD,MAAA,CAAAgF,EAAA,kBAAA3D,KAAA;QACAC,OAAA,CAAAD,KAAA,qBAAAA,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}