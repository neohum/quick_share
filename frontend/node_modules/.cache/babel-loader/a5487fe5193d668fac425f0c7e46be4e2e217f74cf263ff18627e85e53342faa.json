{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  name: 'RoomView',\n  data() {\n    return {\n      roomCode: this.$route.params.roomId,\n      expiresIn: 3600,\n      timerInterval: null,\n      apiUrl: process.env.VUE_APP_API_URL || 'http://localhost:3001'\n    };\n  },\n  async created() {\n    await this.checkRoomStatus();\n    this.startExpiryTimer();\n  },\n  beforeDestroy() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval);\n    }\n  },\n  methods: {\n    async checkRoomStatus() {\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/status`);\n        if (!response.data.active) {\n          this.navigateToHome();\n          alert('방이 만료되었습니다.');\n          return;\n        }\n        this.expiresIn = response.data.expiresIn;\n      } catch (error) {\n        console.error('방 상태 확인 실패:', error);\n        this.navigateToHome();\n      }\n    },\n    navigateToHome() {\n      // 중복 이동 오류 처리\n      this.$router.push('/').catch(err => {\n        if (err.name !== 'NavigationDuplicated') {\n          throw err;\n        }\n      });\n    },\n    startExpiryTimer() {\n      this.timerInterval = setInterval(() => {\n        this.expiresIn--;\n        if (this.expiresIn <= 0) {\n          clearInterval(this.timerInterval);\n          this.navigateToHome();\n          alert('방이 만료되었습니다.');\n        } else if (this.expiresIn % 60 === 0) {\n          // 1분마다 서버에서 실제 만료 시간 확인\n          this.checkRoomStatus();\n        }\n      }, 1000);\n    },\n    formatTime(seconds) {\n      const hours = Math.floor(seconds / 3600);\n      const minutes = Math.floor(seconds % 3600 / 60);\n      const remainingSeconds = seconds % 60;\n      return `${hours}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","roomCode","$route","params","roomId","expiresIn","timerInterval","apiUrl","process","env","VUE_APP_API_URL","created","checkRoomStatus","startExpiryTimer","beforeDestroy","clearInterval","methods","response","get","active","navigateToHome","alert","error","console","$router","push","catch","err","setInterval","formatTime","seconds","hours","Math","floor","minutes","remainingSeconds","String","padStart"],"sources":["src/views/RoomView.vue"],"sourcesContent":["<template>\n  <div class=\"room\">\n    <div class=\"room-header\">\n      <h2>방 코드: {{ roomCode }}</h2>\n      <div class=\"expiry-timer\" :class=\"{ 'expiry-warning': expiresIn < 600 }\">\n        남은 시간: {{ formatTime(expiresIn) }}\n      </div>\n    </div>\n    <!-- 방 컨텐츠를 여기에 추가 -->\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  name: 'RoomView',\n  data() {\n    return {\n      roomCode: this.$route.params.roomId,\n      expiresIn: 3600,\n      timerInterval: null,\n      apiUrl: process.env.VUE_APP_API_URL || 'http://localhost:3001'\n    }\n  },\n  async created() {\n    await this.checkRoomStatus()\n    this.startExpiryTimer()\n  },\n  beforeDestroy() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval)\n    }\n  },\n  methods: {\n    async checkRoomStatus() {\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/status`)\n        if (!response.data.active) {\n          this.navigateToHome()\n          alert('방이 만료되었습니다.')\n          return\n        }\n        this.expiresIn = response.data.expiresIn\n      } catch (error) {\n        console.error('방 상태 확인 실패:', error)\n        this.navigateToHome()\n      }\n    },\n    navigateToHome() {\n      // 중복 이동 오류 처리\n      this.$router.push('/').catch(err => {\n        if (err.name !== 'NavigationDuplicated') {\n          throw err\n        }\n      })\n    },\n    startExpiryTimer() {\n      this.timerInterval = setInterval(() => {\n        this.expiresIn--\n        if (this.expiresIn <= 0) {\n          clearInterval(this.timerInterval)\n          this.navigateToHome()\n          alert('방이 만료되었습니다.')\n        } else if (this.expiresIn % 60 === 0) {\n          // 1분마다 서버에서 실제 만료 시간 확인\n          this.checkRoomStatus()\n        }\n      }, 1000)\n    },\n    formatTime(seconds) {\n      const hours = Math.floor(seconds / 3600)\n      const minutes = Math.floor((seconds % 3600) / 60)\n      const remainingSeconds = seconds % 60\n\n      return `${hours}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`\n    }\n  }\n}\n</script>\n\n<style scoped>\n.room {\n  padding: 20px;\n}\n\n.room-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 20px;\n  background-color: #f5f5f5;\n}\n\n.expiry-timer {\n  font-family: monospace;\n  padding: 5px 10px;\n  border-radius: 4px;\n  background-color: #e0e0e0;\n}\n\n.expiry-warning {\n  background-color: #ffebee;\n  color: #c62828;\n  animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n  0% { opacity: 1; }\n  50% { opacity: 0.5; }\n  100% { opacity: 1; }\n}\n</style>\n"],"mappings":";AAaA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA,OAAAC,MAAA,CAAAC,MAAA,CAAAC,MAAA;MACAC,SAAA;MACAC,aAAA;MACAC,MAAA,EAAAC,OAAA,CAAAC,GAAA,CAAAC,eAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,WAAAC,eAAA;IACA,KAAAC,gBAAA;EACA;EACAC,cAAA;IACA,SAAAR,aAAA;MACAS,aAAA,MAAAT,aAAA;IACA;EACA;EACAU,OAAA;IACA,MAAAJ,gBAAA;MACA;QACA,MAAAK,QAAA,SAAAnB,KAAA,CAAAoB,GAAA,SAAAX,MAAA,mBAAAN,QAAA;QACA,KAAAgB,QAAA,CAAAjB,IAAA,CAAAmB,MAAA;UACA,KAAAC,cAAA;UACAC,KAAA;UACA;QACA;QACA,KAAAhB,SAAA,GAAAY,QAAA,CAAAjB,IAAA,CAAAK,SAAA;MACA,SAAAiB,KAAA;QACAC,OAAA,CAAAD,KAAA,gBAAAA,KAAA;QACA,KAAAF,cAAA;MACA;IACA;IACAA,eAAA;MACA;MACA,KAAAI,OAAA,CAAAC,IAAA,MAAAC,KAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAA5B,IAAA;UACA,MAAA4B,GAAA;QACA;MACA;IACA;IACAd,iBAAA;MACA,KAAAP,aAAA,GAAAsB,WAAA;QACA,KAAAvB,SAAA;QACA,SAAAA,SAAA;UACAU,aAAA,MAAAT,aAAA;UACA,KAAAc,cAAA;UACAC,KAAA;QACA,gBAAAhB,SAAA;UACA;UACA,KAAAO,eAAA;QACA;MACA;IACA;IACAiB,WAAAC,OAAA;MACA,MAAAC,KAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAH,OAAA;MACA,MAAAI,OAAA,GAAAF,IAAA,CAAAC,KAAA,CAAAH,OAAA;MACA,MAAAK,gBAAA,GAAAL,OAAA;MAEA,UAAAC,KAAA,IAAAK,MAAA,CAAAF,OAAA,EAAAG,QAAA,YAAAD,MAAA,CAAAD,gBAAA,EAAAE,QAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}