{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'DocumentViewer',\n  props: {\n    file: {\n      type: Object,\n      required: true\n    },\n    roomCode: {\n      type: String,\n      required: true\n    },\n    apiUrl: {\n      type: String,\n      required: true\n    },\n    socket: {\n      type: Object,\n      required: true\n    },\n    userId: {\n      type: String,\n      required: true\n    }\n  },\n  data() {\n    return {\n      loading: true,\n      error: null,\n      previewUrl: '',\n      textContent: '',\n      previewInfo: null\n    };\n  },\n  computed: {\n    isPdfFile() {\n      return this.file.mimetype === 'application/pdf' || this.file.originalName.toLowerCase().endsWith('.pdf');\n    },\n    isOfficeFile() {\n      const officeExtensions = ['.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.hwp'];\n      const fileName = this.file.originalName.toLowerCase();\n      return officeExtensions.some(ext => fileName.endsWith(ext));\n    },\n    isTextFile() {\n      const textExtensions = ['.txt', '.csv', '.json', '.xml', '.html', '.css', '.js'];\n      const fileName = this.file.originalName.toLowerCase();\n      return textExtensions.some(ext => fileName.endsWith(ext)) || this.file.mimetype.startsWith('text/');\n    },\n    officeViewerUrl() {\n      // Microsoft Office Online Viewer URL 생성\n      const fileUrl = encodeURIComponent(`${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}`);\n      return `https://view.officeapps.live.com/op/embed.aspx?src=${fileUrl}`;\n    }\n  },\n  async created() {\n    try {\n      // 문서 보기 시작 알림\n      await this.notifyViewStart();\n\n      // 파일 형식에 따라 다른 처리\n      if (this.isPdfFile || this.isOfficeFile) {\n        // 미리보기 URL 가져오기\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}/preview`);\n        this.previewInfo = response.data;\n        this.previewUrl = response.data.previewUrl;\n      } else if (this.isTextFile) {\n        // 텍스트 파일 내용 가져오기\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}`, {\n          responseType: 'text'\n        });\n        this.textContent = response.data;\n      }\n      this.loading = false;\n    } catch (error) {\n      console.error('문서 로드 오류:', error);\n      this.error = '문서를 불러오는 중 오류가 발생했습니다.';\n      this.loading = false;\n    }\n  },\n  beforeDestroy() {\n    // 문서 보기 종료 알림\n    this.notifyViewEnd();\n  },\n  methods: {\n    async notifyViewStart() {\n      try {\n        await axios.post(`${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}/view`, {\n          userId: this.userId,\n          action: 'join'\n        });\n      } catch (error) {\n        console.error('보기 시작 알림 오류:', error);\n      }\n    },\n    async notifyViewEnd() {\n      try {\n        await axios.post(`${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}/view`, {\n          userId: this.userId,\n          action: 'leave'\n        });\n      } catch (error) {\n        console.error('보기 종료 알림 오류:', error);\n      }\n    },\n    downloadFile() {\n      const downloadUrl = `${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}`;\n      window.open(downloadUrl, '_blank');\n    }\n  }\n};","map":{"version":3,"names":["axios","name","props","file","type","Object","required","roomCode","String","apiUrl","socket","userId","data","loading","error","previewUrl","textContent","previewInfo","computed","isPdfFile","mimetype","originalName","toLowerCase","endsWith","isOfficeFile","officeExtensions","fileName","some","ext","isTextFile","textExtensions","startsWith","officeViewerUrl","fileUrl","encodeURIComponent","filename","created","notifyViewStart","response","get","responseType","console","beforeDestroy","notifyViewEnd","methods","post","action","downloadFile","downloadUrl","window","open"],"sources":["src/components/DocumentViewer.vue"],"sourcesContent":["<template>\n  <div class=\"document-viewer\">\n    <div class=\"document-header\">\n      <h3>{{ file.originalName }}</h3>\n      <div class=\"viewer-info\">\n        <span class=\"view-count\">{{ file.viewCount || 0 }} 명이 보는 중</span>\n      </div>\n    </div>\n\n    <div class=\"document-content\">\n      <div v-if=\"loading\" class=\"loading\">\n        문서를 불러오는 중...\n      </div>\n      <div v-else-if=\"error\" class=\"error\">\n        {{ error }}\n      </div>\n      <div v-else class=\"preview-container\">\n        <!-- PDF 파일 미리보기 -->\n        <iframe\n          v-if=\"isPdfFile\"\n          :src=\"previewUrl\"\n          class=\"pdf-viewer\"\n          frameborder=\"0\"\n        ></iframe>\n\n        <!-- Office 문서 미리보기 -->\n        <div v-else-if=\"isOfficeFile\" class=\"office-viewer-container\">\n          <div class=\"office-viewer-header\">\n            <h4>{{ file.originalName }}</h4>\n            <p class=\"office-viewer-info\">\n              이 문서는 실시간으로 보기를 지원합니다. 다른 사용자들도 함께 보고 있습니다.\n            </p>\n          </div>\n          <div class=\"office-viewer-content\">\n            <iframe\n              :src=\"previewUrl\"\n              class=\"office-viewer\"\n              frameborder=\"0\"\n            ></iframe>\n          </div>\n        </div>\n\n        <!-- 텍스트 파일 미리보기 -->\n        <div v-else-if=\"isTextFile\" class=\"text-viewer\">\n          <pre>{{ textContent }}</pre>\n        </div>\n\n        <!-- 지원하지 않는 파일 형식 -->\n        <div v-else class=\"unsupported-format\">\n          이 파일 형식은 미리보기를 지원하지 않습니다.\n          <div class=\"download-prompt\">\n            <button @click=\"downloadFile\" class=\"download-button\">\n              다운로드하기\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  name: 'DocumentViewer',\n\n  props: {\n    file: {\n      type: Object,\n      required: true\n    },\n    roomCode: {\n      type: String,\n      required: true\n    },\n    apiUrl: {\n      type: String,\n      required: true\n    },\n    socket: {\n      type: Object,\n      required: true\n    },\n    userId: {\n      type: String,\n      required: true\n    }\n  },\n\n  data() {\n    return {\n      loading: true,\n      error: null,\n      previewUrl: '',\n      textContent: '',\n      previewInfo: null\n    }\n  },\n\n  computed: {\n    isPdfFile() {\n      return this.file.mimetype === 'application/pdf' ||\n             this.file.originalName.toLowerCase().endsWith('.pdf')\n    },\n\n    isOfficeFile() {\n      const officeExtensions = ['.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.hwp']\n      const fileName = this.file.originalName.toLowerCase()\n      return officeExtensions.some(ext => fileName.endsWith(ext))\n    },\n\n    isTextFile() {\n      const textExtensions = ['.txt', '.csv', '.json', '.xml', '.html', '.css', '.js']\n      const fileName = this.file.originalName.toLowerCase()\n      return textExtensions.some(ext => fileName.endsWith(ext)) ||\n             this.file.mimetype.startsWith('text/')\n    },\n\n    officeViewerUrl() {\n      // Microsoft Office Online Viewer URL 생성\n      const fileUrl = encodeURIComponent(`${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}`)\n      return `https://view.officeapps.live.com/op/embed.aspx?src=${fileUrl}`\n    }\n  },\n\n  async created() {\n    try {\n      // 문서 보기 시작 알림\n      await this.notifyViewStart()\n\n      // 파일 형식에 따라 다른 처리\n      if (this.isPdfFile || this.isOfficeFile) {\n        // 미리보기 URL 가져오기\n        const response = await axios.get(\n          `${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}/preview`\n        )\n        this.previewInfo = response.data\n        this.previewUrl = response.data.previewUrl\n      } else if (this.isTextFile) {\n        // 텍스트 파일 내용 가져오기\n        const response = await axios.get(\n          `${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}`,\n          { responseType: 'text' }\n        )\n        this.textContent = response.data\n      }\n\n      this.loading = false\n    } catch (error) {\n      console.error('문서 로드 오류:', error)\n      this.error = '문서를 불러오는 중 오류가 발생했습니다.'\n      this.loading = false\n    }\n  },\n\n  beforeDestroy() {\n    // 문서 보기 종료 알림\n    this.notifyViewEnd()\n  },\n\n  methods: {\n    async notifyViewStart() {\n      try {\n        await axios.post(\n          `${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}/view`,\n          {\n            userId: this.userId,\n            action: 'join'\n          }\n        )\n      } catch (error) {\n        console.error('보기 시작 알림 오류:', error)\n      }\n    },\n\n    async notifyViewEnd() {\n      try {\n        await axios.post(\n          `${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}/view`,\n          {\n            userId: this.userId,\n            action: 'leave'\n          }\n        )\n      } catch (error) {\n        console.error('보기 종료 알림 오류:', error)\n      }\n    },\n\n    downloadFile() {\n      const downloadUrl = `${this.apiUrl}/api/rooms/${this.roomCode}/files/${this.file.filename}`\n      window.open(downloadUrl, '_blank')\n    }\n  }\n}\n</script>\n\n<style scoped>\n.document-viewer {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  overflow: hidden;\n  background-color: white;\n}\n\n.document-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px 15px;\n  background-color: #f5f5f5;\n  border-bottom: 1px solid #e0e0e0;\n}\n\n.document-header h3 {\n  margin: 0;\n  font-size: 16px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.viewer-info {\n  font-size: 14px;\n  color: #666;\n}\n\n.view-count {\n  background-color: #e3f2fd;\n  padding: 3px 8px;\n  border-radius: 12px;\n  font-size: 12px;\n}\n\n.document-content {\n  flex: 1;\n  position: relative;\n  overflow: hidden;\n}\n\n.loading, .error, .unsupported-format {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  padding: 20px;\n  text-align: center;\n  color: #666;\n}\n\n.error {\n  color: #f44336;\n}\n\n.preview-container {\n  height: 100%;\n}\n\n.pdf-viewer, .office-viewer-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background-color: #f9f9f9;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.office-viewer-header {\n  padding: 10px 15px;\n  background-color: #e3f2fd;\n  border-bottom: 1px solid #bbdefb;\n}\n\n.office-viewer-header h4 {\n  margin: 0 0 5px 0;\n  font-size: 16px;\n  color: #1976d2;\n}\n\n.office-viewer-info {\n  margin: 0;\n  font-size: 12px;\n  color: #546e7a;\n}\n\n.office-viewer-content {\n  flex: 1;\n  position: relative;\n  overflow: hidden;\n}\n\n.office-viewer {\n  width: 100%;\n  height: 100%;\n  border: none;\n}\n\n.text-viewer {\n  height: 100%;\n  overflow: auto;\n  padding: 15px;\n  background-color: #f9f9f9;\n}\n\n.text-viewer pre {\n  margin: 0;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  font-family: monospace;\n}\n\n.download-prompt {\n  margin-top: 20px;\n}\n\n.download-button {\n  padding: 8px 16px;\n  background-color: #2196f3;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.download-button:hover {\n  background-color: #1976d2;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}