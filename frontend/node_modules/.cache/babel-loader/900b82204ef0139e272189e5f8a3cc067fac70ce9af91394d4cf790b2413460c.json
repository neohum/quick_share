{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport axios from 'axios';\nimport io from 'socket.io-client';\n\n// UUID 생성 함수\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\nexport default {\n  name: 'RoomView',\n  data() {\n    return {\n      roomCode: this.$route.params.roomId,\n      expiresIn: 3600,\n      timerInterval: null,\n      apiUrl: process.env.VUE_APP_API_URL || 'http://localhost:3001',\n      socketUrl: process.env.VUE_APP_SOCKET_URL || 'http://localhost:3001',\n      socket: null,\n      selectedFile: null,\n      isUploading: false,\n      uploadError: '',\n      uploadSuccess: '',\n      files: [],\n      isLoading: false,\n      userId: `user_${Date.now()}_${Math.floor(Math.random() * 1000)}`,\n      // 임시 사용자 ID\n      notification: {\n        show: false,\n        message: '',\n        timeout: null\n      }\n    };\n  },\n  async created() {\n    try {\n      // 방 참여 또는 생성 시도\n      await this.joinOrCreateRoom();\n      this.startExpiryTimer();\n      this.loadFiles();\n      this.connectSocket();\n    } catch (error) {\n      console.error('방 참여 오류:', error);\n      this.navigateToHome();\n    }\n  },\n  beforeDestroy() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval);\n    }\n\n    // Socket.IO 연결 해제\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n  },\n  methods: {\n    async joinOrCreateRoom() {\n      try {\n        // 방 참여 시도\n        const response = await axios.post(`${this.apiUrl}/api/rooms/${this.roomCode}`);\n        this.expiresIn = response.data.expiresIn || 3600;\n        this.showNotification('방에 성공적으로 참여했습니다.');\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          // 방이 없는 경우, 6자리 숫자인지 확인\n          if (/^\\d{6}$/.test(this.roomCode)) {\n            // 방 생성 시도\n            try {\n              const createResponse = await axios.post(`${this.apiUrl}/api/rooms`, {\n                roomCode: this.roomCode\n              });\n              this.expiresIn = createResponse.data.expiresIn || 3600;\n              this.showNotification('새 방이 생성되었습니다.');\n            } catch (createError) {\n              console.error('방 생성 오류:', createError);\n              throw createError;\n            }\n          } else {\n            throw error;\n          }\n        } else {\n          throw error;\n        }\n      }\n    },\n    async checkRoomStatus() {\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/status`);\n        if (!response.data.active) {\n          this.navigateToHome();\n          alert('방이 만료되었습니다.');\n          return;\n        }\n        this.expiresIn = response.data.expiresIn;\n      } catch (error) {\n        console.error('방 상태 확인 실패:', error);\n        this.navigateToHome();\n      }\n    },\n    navigateToHome() {\n      // 중복 이동 오류 처리\n      this.$router.push('/').catch(err => {\n        if (err.name !== 'NavigationDuplicated') {\n          throw err;\n        }\n      });\n    },\n    startExpiryTimer() {\n      this.timerInterval = setInterval(() => {\n        this.expiresIn--;\n        if (this.expiresIn <= 0) {\n          clearInterval(this.timerInterval);\n          this.navigateToHome();\n          alert('방이 만료되었습니다.');\n        } else if (this.expiresIn % 60 === 0) {\n          // 1분마다 서버에서 실제 만료 시간 확인\n          this.checkRoomStatus();\n        }\n      }, 1000);\n    },\n    formatTime(seconds) {\n      const hours = Math.floor(seconds / 3600);\n      const minutes = Math.floor(seconds % 3600 / 60);\n      const remainingSeconds = seconds % 60;\n      return `${hours}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`;\n    },\n    // 파일 업로드 관련 메서드\n    handleFileChange(event) {\n      this.selectedFile = event.target.files[0] || null;\n      this.uploadError = '';\n      this.uploadSuccess = '';\n    },\n    async uploadFile() {\n      if (!this.selectedFile) {\n        this.uploadError = '업로드할 파일을 선택해주세요.';\n        return;\n      }\n      this.isUploading = true;\n      this.uploadError = '';\n      this.uploadSuccess = '';\n      const formData = new FormData();\n      formData.append('file', this.selectedFile);\n      try {\n        const response = await axios.post(`${this.apiUrl}/api/rooms/${this.roomCode}/files`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        this.uploadSuccess = response.data.message || '파일이 성공적으로 업로드되었습니다.';\n        this.selectedFile = null;\n        this.$refs.fileInput.value = '';\n\n        // 파일 목록 새로고침\n        this.loadFiles();\n      } catch (error) {\n        console.error('파일 업로드 오류:', error);\n        this.uploadError = error.response?.data?.message || '파일 업로드에 실패했습니다.';\n      } finally {\n        this.isUploading = false;\n      }\n    },\n    // 파일 목록 관련 메서드\n    async loadFiles() {\n      this.isLoading = true;\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/files`);\n        const files = response.data.files || [];\n\n        // 중복 파일 제거 및 고유 ID 할당\n        const filenameMap = new Map();\n\n        // 파일명으로 중복 제거\n        files.forEach(file => {\n          // 이미 동일한 파일명이 있는 경우 가장 최근 파일로 대체\n          if (!filenameMap.has(file.filename) || file.uploadedAt > filenameMap.get(file.filename).uploadedAt) {\n            filenameMap.set(file.filename, file);\n          }\n        });\n\n        // 중복이 제거된 파일 목록 가져오기\n        const uniqueFiles = Array.from(filenameMap.values());\n\n        // 각 파일에 고유 ID 할당 (이미 있는 경우 유지)\n        this.files = uniqueFiles.map(file => ({\n          ...file,\n          _uniqueKey: generateUUID() // 렌더링용 고유 키\n        }));\n      } catch (error) {\n        console.error('파일 목록 로드 오류:', error);\n        this.files = [];\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    // 파일 다운로드 메서드\n    async downloadFile(file) {\n      try {\n        // 다운로드 URL 생성 (ID 사용)\n        const downloadUrl = `${this.apiUrl}/api/rooms/${this.roomCode}/files/download/${file.id}?download=true`;\n\n        // axios를 사용하여 파일 다운로드\n        const response = await axios({\n          url: downloadUrl,\n          method: 'GET',\n          responseType: 'blob'\n        });\n\n        // Blob 생성\n        const blob = new Blob([response.data], {\n          type: file.mimetype\n        });\n\n        // 다운로드 링크 생성\n        const url = window.URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', file.originalName);\n        document.body.appendChild(link);\n\n        // 다운로드 시작\n        link.click();\n\n        // 링크 제거\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(link);\n      } catch (error) {\n        console.error('파일 다운로드 오류:', error);\n        this.showNotification('파일 다운로드에 실패했습니다.');\n      }\n    },\n    // 파일 삭제 메서드\n    async deleteFile(file) {\n      if (!confirm(`파일 \"${file.originalName}\"을(를) 삭제하시겠습니까?`)) {\n        return;\n      }\n      try {\n        const response = await axios.delete(`${this.apiUrl}/api/rooms/${this.roomCode}/files/${file.id}`);\n\n        // 파일 목록에서 삭제\n        const fileIndex = this.files.findIndex(f => f.id === file.id);\n        if (fileIndex !== -1) {\n          this.files.splice(fileIndex, 1);\n        }\n        this.showNotification(response.data.message || '파일이 삭제되었습니다.');\n      } catch (error) {\n        console.error('파일 삭제 오류:', error);\n        this.showNotification('파일 삭제에 실패했습니다.');\n      }\n    },\n    // 알림 표시 메서드\n    showNotification(message, duration = 3000) {\n      // 이전 타이머가 있는 경우 취소\n      if (this.notification.timeout) {\n        clearTimeout(this.notification.timeout);\n      }\n\n      // 알림 표시\n      this.notification.message = message;\n      this.notification.show = true;\n\n      // 일정 시간 후 알림 숨기기\n      this.notification.timeout = setTimeout(() => {\n        this.notification.show = false;\n      }, duration);\n    },\n    // 파일 크기 포맷팅\n    formatFileSize(bytes) {\n      if (bytes === 0) return '0 Bytes';\n      const k = 1024;\n      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    },\n    // 날짜 포맷팅\n    formatDate(timestamp) {\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    },\n    // Socket.IO 연결 관련 메서드\n    connectSocket() {\n      // Socket.IO 연결 생성\n      this.socket = io(this.socketUrl);\n\n      // 연결 이벤트\n      this.socket.on('connect', () => {\n        console.log('Socket.IO 연결 성공');\n\n        // 방에 참여\n        this.socket.emit('joinRoom', this.roomCode);\n      });\n\n      // 파일 업로드 이벤트\n      this.socket.on('fileUploaded', data => {\n        console.log('새 파일 업로드 알림 수신:', data);\n\n        // 파일에 고유 키 추가\n        const newFile = {\n          ...data.file,\n          _uniqueKey: generateUUID()\n        };\n\n        // 파일 목록에 새 파일 추가 (중복 방지)\n        const existingFileIndex = this.files.findIndex(file => file.filename === newFile.filename);\n        if (existingFileIndex !== -1) {\n          // 기존 파일의 고유 키 유지\n          newFile._uniqueKey = this.files[existingFileIndex]._uniqueKey;\n          // 기존 파일 업데이트\n          this.files.splice(existingFileIndex, 1, newFile);\n        } else {\n          // 새 파일 추가\n          this.files.push(newFile);\n        }\n\n        // 파일 목록 정렬 (최신 업로드 순)\n        this.files.sort((a, b) => b.uploadedAt - a.uploadedAt);\n      });\n\n      // 파일 삭제 이벤트\n      this.socket.on('fileDeleted', data => {\n        console.log('파일 삭제 알림 수신:', data);\n\n        // 파일 목록에서 삭제\n        const fileIndex = this.files.findIndex(file => file.id && file.id === data.id || file.filename === data.filename);\n        if (fileIndex !== -1) {\n          this.files.splice(fileIndex, 1);\n          this.showNotification('파일이 삭제되었습니다.');\n        }\n      });\n\n      // 연결 오류 이벤트\n      this.socket.on('connect_error', error => {\n        console.error('Socket.IO 연결 오류:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","io","generateUUID","replace","c","r","Math","random","v","toString","name","data","roomCode","$route","params","roomId","expiresIn","timerInterval","apiUrl","process","env","VUE_APP_API_URL","socketUrl","VUE_APP_SOCKET_URL","socket","selectedFile","isUploading","uploadError","uploadSuccess","files","isLoading","userId","Date","now","floor","notification","show","message","timeout","created","joinOrCreateRoom","startExpiryTimer","loadFiles","connectSocket","error","console","navigateToHome","beforeDestroy","clearInterval","disconnect","methods","response","post","showNotification","status","test","createResponse","createError","checkRoomStatus","get","active","alert","$router","push","catch","err","setInterval","formatTime","seconds","hours","minutes","remainingSeconds","String","padStart","handleFileChange","event","target","uploadFile","formData","FormData","append","headers","$refs","fileInput","value","filenameMap","Map","forEach","file","has","filename","uploadedAt","set","uniqueFiles","Array","from","values","map","_uniqueKey","downloadFile","downloadUrl","id","url","method","responseType","blob","Blob","type","mimetype","window","URL","createObjectURL","link","document","createElement","href","setAttribute","originalName","body","appendChild","click","revokeObjectURL","removeChild","deleteFile","confirm","delete","fileIndex","findIndex","f","splice","duration","clearTimeout","setTimeout","formatFileSize","bytes","k","sizes","i","log","parseFloat","pow","toFixed","formatDate","timestamp","date","toLocaleString","on","emit","newFile","existingFileIndex","sort","a","b"],"sources":["src/views/RoomView.vue"],"sourcesContent":["<template>\n  <div class=\"room\">\n    <!-- 알림 표시 -->\n    <div v-if=\"notification.show\" class=\"notification\">\n      {{ notification.message }}\n    </div>\n    <div class=\"room-header\">\n      <h2>방 코드: {{ roomCode }}</h2>\n      <div class=\"expiry-timer\" :class=\"{ 'expiry-warning': expiresIn < 600 }\">\n        남은 시간: {{ formatTime(expiresIn) }}\n      </div>\n    </div>\n\n    <div class=\"room-content\">\n      <div class=\"content-panel\">\n        <!-- 파일 업로드 영역 -->\n        <div class=\"file-upload-section\">\n          <h3>파일 업로드</h3>\n          <div class=\"upload-form\">\n            <input\n              type=\"file\"\n              ref=\"fileInput\"\n              @change=\"handleFileChange\"\n              class=\"file-input\"\n            />\n            <button\n              @click=\"uploadFile\"\n              :disabled=\"!selectedFile || isUploading\"\n              class=\"upload-button\"\n            >\n              {{ isUploading ? '업로드 중...' : '업로드' }}\n            </button>\n          </div>\n          <div v-if=\"uploadError\" class=\"error-message\">\n            {{ uploadError }}\n          </div>\n          <div v-if=\"uploadSuccess\" class=\"success-message\">\n            {{ uploadSuccess }}\n          </div>\n        </div>\n\n        <!-- 파일 목록 영역 -->\n        <div class=\"file-list-section\">\n          <h3>공유된 파일</h3>\n          <button @click=\"loadFiles\" class=\"refresh-button\">\n            새로고침\n          </button>\n          <div v-if=\"isLoading\" class=\"loading-message\">\n            파일 목록을 불러오는 중...\n          </div>\n          <div v-else-if=\"files.length === 0\" class=\"empty-message\">\n            공유된 파일이 없습니다.\n          </div>\n          <ul v-else class=\"file-list\">\n            <li\n              v-for=\"file in files\"\n              :key=\"file._uniqueKey || generateUUID()\"\n              class=\"file-item\"\n              :class=\"{ 'is-office-document': file.isOfficeDocument, 'is-selected': selectedDocument && selectedDocument.filename === file.filename }\"\n            >\n              <div class=\"file-info\">\n                <span class=\"file-name\">{{ file.originalName }}</span>\n                <span class=\"file-size\">{{ formatFileSize(file.size) }}</span>\n                <span class=\"file-date\">{{ formatDate(file.uploadedAt) }}</span>\n                <span v-if=\"file.viewCount > 0\" class=\"view-count\">{{ file.viewCount }} 명 보는 중</span>\n              </div>\n              <div class=\"file-actions\">\n                <button @click=\"downloadFile(file)\" class=\"download-button\">\n                  다운로드\n                </button>\n                <button @click=\"deleteFile(file)\" class=\"delete-button\">\n                  삭제\n                </button>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport io from 'socket.io-client'\n\n// UUID 생성 함수\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0\n    const v = c === 'x' ? r : (r & 0x3 | 0x8)\n    return v.toString(16)\n  })\n}\n\nexport default {\n  name: 'RoomView',\n  data() {\n    return {\n      roomCode: this.$route.params.roomId,\n      expiresIn: 3600,\n      timerInterval: null,\n      apiUrl: process.env.VUE_APP_API_URL || 'http://localhost:3001',\n      socketUrl: process.env.VUE_APP_SOCKET_URL || 'http://localhost:3001',\n      socket: null,\n      selectedFile: null,\n      isUploading: false,\n      uploadError: '',\n      uploadSuccess: '',\n      files: [],\n      isLoading: false,\n      userId: `user_${Date.now()}_${Math.floor(Math.random() * 1000)}`, // 임시 사용자 ID\n      notification: {\n        show: false,\n        message: '',\n        timeout: null\n      }\n    }\n  },\n  async created() {\n    try {\n      // 방 참여 또는 생성 시도\n      await this.joinOrCreateRoom()\n      this.startExpiryTimer()\n      this.loadFiles()\n      this.connectSocket()\n    } catch (error) {\n      console.error('방 참여 오류:', error)\n      this.navigateToHome()\n    }\n  },\n  beforeDestroy() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval)\n    }\n\n    // Socket.IO 연결 해제\n    if (this.socket) {\n      this.socket.disconnect()\n    }\n  },\n  methods: {\n    async joinOrCreateRoom() {\n      try {\n        // 방 참여 시도\n        const response = await axios.post(`${this.apiUrl}/api/rooms/${this.roomCode}`)\n        this.expiresIn = response.data.expiresIn || 3600\n        this.showNotification('방에 성공적으로 참여했습니다.')\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          // 방이 없는 경우, 6자리 숫자인지 확인\n          if (/^\\d{6}$/.test(this.roomCode)) {\n            // 방 생성 시도\n            try {\n              const createResponse = await axios.post(`${this.apiUrl}/api/rooms`, { roomCode: this.roomCode })\n              this.expiresIn = createResponse.data.expiresIn || 3600\n              this.showNotification('새 방이 생성되었습니다.')\n            } catch (createError) {\n              console.error('방 생성 오류:', createError)\n              throw createError\n            }\n          } else {\n            throw error\n          }\n        } else {\n          throw error\n        }\n      }\n    },\n\n    async checkRoomStatus() {\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/status`)\n        if (!response.data.active) {\n          this.navigateToHome()\n          alert('방이 만료되었습니다.')\n          return\n        }\n        this.expiresIn = response.data.expiresIn\n      } catch (error) {\n        console.error('방 상태 확인 실패:', error)\n        this.navigateToHome()\n      }\n    },\n    navigateToHome() {\n      // 중복 이동 오류 처리\n      this.$router.push('/').catch(err => {\n        if (err.name !== 'NavigationDuplicated') {\n          throw err\n        }\n      })\n    },\n    startExpiryTimer() {\n      this.timerInterval = setInterval(() => {\n        this.expiresIn--\n        if (this.expiresIn <= 0) {\n          clearInterval(this.timerInterval)\n          this.navigateToHome()\n          alert('방이 만료되었습니다.')\n        } else if (this.expiresIn % 60 === 0) {\n          // 1분마다 서버에서 실제 만료 시간 확인\n          this.checkRoomStatus()\n        }\n      }, 1000)\n    },\n    formatTime(seconds) {\n      const hours = Math.floor(seconds / 3600)\n      const minutes = Math.floor((seconds % 3600) / 60)\n      const remainingSeconds = seconds % 60\n\n      return `${hours}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`\n    },\n\n    // 파일 업로드 관련 메서드\n    handleFileChange(event) {\n      this.selectedFile = event.target.files[0] || null\n      this.uploadError = ''\n      this.uploadSuccess = ''\n    },\n\n    async uploadFile() {\n      if (!this.selectedFile) {\n        this.uploadError = '업로드할 파일을 선택해주세요.'\n        return\n      }\n\n      this.isUploading = true\n      this.uploadError = ''\n      this.uploadSuccess = ''\n\n      const formData = new FormData()\n      formData.append('file', this.selectedFile)\n\n      try {\n        const response = await axios.post(\n          `${this.apiUrl}/api/rooms/${this.roomCode}/files`,\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }\n        )\n\n        this.uploadSuccess = response.data.message || '파일이 성공적으로 업로드되었습니다.'\n        this.selectedFile = null\n        this.$refs.fileInput.value = ''\n\n        // 파일 목록 새로고침\n        this.loadFiles()\n      } catch (error) {\n        console.error('파일 업로드 오류:', error)\n        this.uploadError = error.response?.data?.message || '파일 업로드에 실패했습니다.'\n      } finally {\n        this.isUploading = false\n      }\n    },\n\n    // 파일 목록 관련 메서드\n    async loadFiles() {\n      this.isLoading = true\n\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/files`)\n        const files = response.data.files || []\n\n        // 중복 파일 제거 및 고유 ID 할당\n        const filenameMap = new Map()\n\n        // 파일명으로 중복 제거\n        files.forEach(file => {\n          // 이미 동일한 파일명이 있는 경우 가장 최근 파일로 대체\n          if (!filenameMap.has(file.filename) || file.uploadedAt > filenameMap.get(file.filename).uploadedAt) {\n            filenameMap.set(file.filename, file)\n          }\n        })\n\n        // 중복이 제거된 파일 목록 가져오기\n        const uniqueFiles = Array.from(filenameMap.values())\n\n        // 각 파일에 고유 ID 할당 (이미 있는 경우 유지)\n        this.files = uniqueFiles.map(file => ({\n          ...file,\n          _uniqueKey: generateUUID() // 렌더링용 고유 키\n        }))\n      } catch (error) {\n        console.error('파일 목록 로드 오류:', error)\n        this.files = []\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    // 파일 다운로드 메서드\n    async downloadFile(file) {\n      try {\n        // 다운로드 URL 생성 (ID 사용)\n        const downloadUrl = `${this.apiUrl}/api/rooms/${this.roomCode}/files/download/${file.id}?download=true`\n\n        // axios를 사용하여 파일 다운로드\n        const response = await axios({\n          url: downloadUrl,\n          method: 'GET',\n          responseType: 'blob'\n        })\n\n        // Blob 생성\n        const blob = new Blob([response.data], { type: file.mimetype })\n\n        // 다운로드 링크 생성\n        const url = window.URL.createObjectURL(blob)\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', file.originalName)\n        document.body.appendChild(link)\n\n        // 다운로드 시작\n        link.click()\n\n        // 링크 제거\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(link)\n      } catch (error) {\n        console.error('파일 다운로드 오류:', error)\n        this.showNotification('파일 다운로드에 실패했습니다.')\n      }\n    },\n\n\n\n    // 파일 삭제 메서드\n    async deleteFile(file) {\n      if (!confirm(`파일 \"${file.originalName}\"을(를) 삭제하시겠습니까?`)) {\n        return\n      }\n\n      try {\n        const response = await axios.delete(`${this.apiUrl}/api/rooms/${this.roomCode}/files/${file.id}`)\n\n        // 파일 목록에서 삭제\n        const fileIndex = this.files.findIndex(f => f.id === file.id)\n        if (fileIndex !== -1) {\n          this.files.splice(fileIndex, 1)\n        }\n\n\n\n        this.showNotification(response.data.message || '파일이 삭제되었습니다.')\n      } catch (error) {\n        console.error('파일 삭제 오류:', error)\n        this.showNotification('파일 삭제에 실패했습니다.')\n      }\n    },\n\n    // 알림 표시 메서드\n    showNotification(message, duration = 3000) {\n      // 이전 타이머가 있는 경우 취소\n      if (this.notification.timeout) {\n        clearTimeout(this.notification.timeout)\n      }\n\n      // 알림 표시\n      this.notification.message = message\n      this.notification.show = true\n\n      // 일정 시간 후 알림 숨기기\n      this.notification.timeout = setTimeout(() => {\n        this.notification.show = false\n      }, duration)\n    },\n\n    // 파일 크기 포맷팅\n    formatFileSize(bytes) {\n      if (bytes === 0) return '0 Bytes'\n\n      const k = 1024\n      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n      const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n    },\n\n    // 날짜 포맷팅\n    formatDate(timestamp) {\n      const date = new Date(timestamp)\n      return date.toLocaleString()\n    },\n\n    // Socket.IO 연결 관련 메서드\n    connectSocket() {\n      // Socket.IO 연결 생성\n      this.socket = io(this.socketUrl)\n\n      // 연결 이벤트\n      this.socket.on('connect', () => {\n        console.log('Socket.IO 연결 성공')\n\n        // 방에 참여\n        this.socket.emit('joinRoom', this.roomCode)\n      })\n\n      // 파일 업로드 이벤트\n      this.socket.on('fileUploaded', (data) => {\n        console.log('새 파일 업로드 알림 수신:', data)\n\n        // 파일에 고유 키 추가\n        const newFile = {\n          ...data.file,\n          _uniqueKey: generateUUID()\n        }\n\n        // 파일 목록에 새 파일 추가 (중복 방지)\n        const existingFileIndex = this.files.findIndex(file => file.filename === newFile.filename)\n\n        if (existingFileIndex !== -1) {\n          // 기존 파일의 고유 키 유지\n          newFile._uniqueKey = this.files[existingFileIndex]._uniqueKey\n          // 기존 파일 업데이트\n          this.files.splice(existingFileIndex, 1, newFile)\n        } else {\n          // 새 파일 추가\n          this.files.push(newFile)\n        }\n\n        // 파일 목록 정렬 (최신 업로드 순)\n        this.files.sort((a, b) => b.uploadedAt - a.uploadedAt)\n      })\n\n\n\n      // 파일 삭제 이벤트\n      this.socket.on('fileDeleted', (data) => {\n        console.log('파일 삭제 알림 수신:', data)\n\n        // 파일 목록에서 삭제\n        const fileIndex = this.files.findIndex(file =>\n          (file.id && file.id === data.id) ||\n          file.filename === data.filename\n        )\n\n        if (fileIndex !== -1) {\n          this.files.splice(fileIndex, 1)\n          this.showNotification('파일이 삭제되었습니다.')\n        }\n      })\n\n      // 연결 오류 이벤트\n      this.socket.on('connect_error', (error) => {\n        console.error('Socket.IO 연결 오류:', error)\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n:root {\n  --primary-color: #3f51b5;\n  --primary-light: #757de8;\n  --primary-dark: #002984;\n  --secondary-color: #ff4081;\n  --secondary-light: #ff79b0;\n  --secondary-dark: #c60055;\n  --text-on-primary: #ffffff;\n  --text-on-secondary: #ffffff;\n  --background-color: #f5f7fa;\n  --surface-color: #ffffff;\n  --error-color: #f44336;\n  --success-color: #4caf50;\n  --warning-color: #ff9800;\n  --info-color: #2196f3;\n}\n\n.room {\n  padding: 20px;\n  background-color: var(--background-color);\n  min-height: 100vh;\n  font-family: 'Roboto', 'Noto Sans KR', sans-serif;\n}\n\n.room-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px 24px;\n  background-color: var(--primary-color);\n  color: var(--text-on-primary);\n  margin-bottom: 24px;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n\n.room-header h2 {\n  margin: 0;\n  font-size: 1.5rem;\n  font-weight: 500;\n}\n\n.expiry-timer {\n  font-family: 'Roboto Mono', monospace;\n  padding: 8px 12px;\n  border-radius: 20px;\n  background-color: rgba(255, 255, 255, 0.2);\n  color: var(--text-on-primary);\n  font-weight: 500;\n  letter-spacing: 1px;\n  transition: all 0.3s ease;\n}\n\n.expiry-warning {\n  background-color: var(--error-color);\n  color: var(--text-on-secondary);\n  animation: pulse 2s infinite;\n  box-shadow: 0 0 10px rgba(244, 67, 54, 0.5);\n}\n\n.room-content {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 24px;\n  transition: all 0.3s ease;\n}\n\n.content-panel {\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n}\n\n.file-upload-section,\n.file-list-section {\n  background-color: var(--surface-color);\n  padding: 24px;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n}\n\n.file-upload-section h3,\n.file-list-section h3 {\n  margin-top: 0;\n  margin-bottom: 16px;\n  color: var(--primary-color);\n  font-size: 1.25rem;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n}\n\n.file-upload-section h3::before,\n.file-list-section h3::before {\n  content: '';\n  display: inline-block;\n  width: 4px;\n  height: 18px;\n  background-color: var(--primary-color);\n  margin-right: 8px;\n  border-radius: 2px;\n}\n\n.upload-form {\n  display: flex;\n  margin-top: 16px;\n  margin-bottom: 16px;\n  position: relative;\n}\n\n.file-input {\n  flex: 1;\n  padding: 12px 16px;\n  border: 2px solid #e0e0e0;\n  border-radius: 8px 0 0 8px;\n  font-size: 14px;\n  transition: all 0.3s ease;\n  outline: none;\n}\n\n.file-input:focus {\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 2px rgba(63, 81, 181, 0.2);\n}\n\n.upload-button {\n  padding: 12px 20px;\n  background-color: var(--primary-color);\n  color: var(--text-on-primary);\n  border: none;\n  border-radius: 0 8px 8px 0;\n  cursor: pointer;\n  font-weight: 500;\n  letter-spacing: 0.5px;\n  transition: all 0.3s ease;\n}\n\n.upload-button:hover {\n  background-color: var(--primary-dark);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.upload-button:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n  box-shadow: none;\n}\n\n.error-message {\n  color: var(--error-color);\n  margin-top: 12px;\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n}\n\n.error-message::before {\n  content: '⚠️';\n  margin-right: 6px;\n}\n\n.success-message {\n  color: var(--success-color);\n  margin-top: 12px;\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n}\n\n.success-message::before {\n  content: '✅';\n  margin-right: 6px;\n}\n\n.refresh-button {\n  padding: 8px 16px;\n  background-color: var(--info-color);\n  color: var(--text-on-primary);\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  margin-left: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  display: inline-flex;\n  align-items: center;\n  transition: all 0.3s ease;\n}\n\n.refresh-button::before {\n  content: '🔄';\n  margin-right: 6px;\n  font-size: 14px;\n}\n\n.refresh-button:hover {\n  background-color: #1976d2;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n}\n\n.loading-message,\n.empty-message {\n  margin-top: 16px;\n  color: #757575;\n  font-style: italic;\n  text-align: center;\n  padding: 24px;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.loading-message::before {\n  content: '⏳';\n  margin-right: 8px;\n}\n\n.empty-message::before {\n  content: '📂';\n  margin-right: 8px;\n}\n\n.file-list {\n  list-style: none;\n  padding: 0;\n  margin-top: 16px;\n}\n\n.file-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  margin-bottom: 12px;\n  background-color: white;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.file-item:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.file-item.is-office-document {\n  border-left: 4px solid var(--primary-color);\n}\n\n.file-item.is-selected {\n  background-color: #e8eaf6;\n  border-color: var(--primary-color);\n}\n\n.file-info {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}\n\n.file-name {\n  font-weight: 500;\n  margin-bottom: 8px;\n  color: #333;\n  font-size: 16px;\n  word-break: break-all;\n}\n\n.file-size,\n.file-date {\n  font-size: 13px;\n  color: #757575;\n  margin-bottom: 4px;\n  display: flex;\n  align-items: center;\n}\n\n.file-size::before {\n  content: '📊';\n  margin-right: 6px;\n  font-size: 12px;\n}\n\n.file-date::before {\n  content: '🕒';\n  margin-right: 6px;\n  font-size: 12px;\n}\n\n.view-count {\n  font-size: 13px;\n  color: var(--primary-color);\n  background-color: #e8eaf6;\n  padding: 4px 10px;\n  border-radius: 16px;\n  display: inline-flex;\n  align-items: center;\n  margin-top: 8px;\n  font-weight: 500;\n}\n\n.view-count::before {\n  content: '👁️';\n  margin-right: 6px;\n  font-size: 12px;\n}\n\n.file-actions {\n  display: flex;\n  gap: 10px;\n}\n\n.download-button,\n.view-button {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  display: inline-flex;\n  align-items: center;\n  transition: all 0.3s ease;\n}\n\n.download-button {\n  background-color: var(--info-color);\n  color: var(--text-on-primary);\n}\n\n.download-button::before {\n  content: '⬇️';\n  margin-right: 6px;\n  font-size: 14px;\n}\n\n.download-button:hover {\n  background-color: #1976d2;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n}\n\n.view-button {\n  background-color: var(--success-color);\n  color: var(--text-on-primary);\n}\n\n.view-button::before {\n  content: '👁️';\n  margin-right: 6px;\n  font-size: 14px;\n}\n\n.view-button:hover {\n  background-color: #388e3c;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n}\n\n.delete-button {\n  background-color: var(--error-color);\n  color: var(--text-on-primary);\n}\n\n.delete-button::before {\n  content: '🗑️';\n  margin-right: 6px;\n  font-size: 14px;\n}\n\n.delete-button:hover {\n  background-color: #d32f2f;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n}\n\n\n\n@keyframes pulse {\n  0% { opacity: 1; }\n  50% { opacity: 0.5; }\n  100% { opacity: 1; }\n}\n\n.notification {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background-color: #2ecc71; /* 더 선명한 녹색 */\n  color: white;\n  padding: 16px 24px;\n  border-radius: 12px;\n  box-shadow: 0 8px 16px rgba(46, 204, 113, 0.3);\n  z-index: 1000;\n  animation: slideIn 0.3s ease-out, fadeOut 0.5s ease-in 2.5s forwards;\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  max-width: 80%;\n  border-left: 5px solid #27ae60; /* 왼쪽 테두리 추가 */\n}\n\n.notification::before {\n  content: '📢';\n  margin-right: 10px;\n  font-size: 18px;\n}\n\n@keyframes slideIn {\n  from { transform: translateX(100%); opacity: 0; }\n  to { transform: translateX(0); opacity: 1; }\n}\n\n@keyframes fadeOut {\n  from { opacity: 1; }\n  to { opacity: 0; }\n}\n\n/* 반응형 디자인 */\n@media (max-width: 992px) {\n\n  .room-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 10px;\n  }\n\n  .expiry-timer {\n    align-self: flex-start;\n  }\n\n  .file-actions {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .download-button, .view-button {\n    width: 100%;\n    justify-content: center;\n  }\n}\n\n@media (max-width: 576px) {\n  .room {\n    padding: 12px;\n  }\n\n  .room-header {\n    padding: 12px 16px;\n    margin-bottom: 16px;\n  }\n\n  .file-upload-section, .file-list-section {\n    padding: 16px;\n  }\n\n  .upload-form {\n    flex-direction: column;\n  }\n\n  .file-input {\n    border-radius: 8px 8px 0 0;\n  }\n\n  .upload-button {\n    border-radius: 0 0 8px 8px;\n  }\n\n  .file-item {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  .file-info {\n    width: 100%;\n    margin-bottom: 12px;\n  }\n\n  .file-actions {\n    width: 100%;\n  }\n\n  .notification {\n    top: 10px;\n    right: 10px;\n    left: 10px;\n    max-width: calc(100% - 20px);\n    padding: 12px 16px;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}