[{"/Users/nm/works/prototype/quick-share/frontend/src/main.js":"1","/Users/nm/works/prototype/quick-share/frontend/src/App.vue":"2","/Users/nm/works/prototype/quick-share/frontend/src/router/index.js":"3","/Users/nm/works/prototype/quick-share/frontend/src/store/index.js":"4","/Users/nm/works/prototype/quick-share/frontend/src/views/HomeView.vue":"5","/Users/nm/works/prototype/quick-share/frontend/src/views/RoomView.vue":"6"},{"size":239,"mtime":1740018725805,"results":"7","hashOfConfig":"8"},{"size":269,"mtime":1740014170797,"results":"9","hashOfConfig":"8"},{"size":594,"mtime":1743905987441,"results":"10","hashOfConfig":"8"},{"size":185,"mtime":1740014173231,"results":"11","hashOfConfig":"8"},{"size":7302,"mtime":1747460772477,"results":"12","hashOfConfig":"8"},{"size":26584,"mtime":1747460359280,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"qu676a",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},"/Users/nm/works/prototype/quick-share/frontend/src/main.js",[],[],"/Users/nm/works/prototype/quick-share/frontend/src/App.vue",[],[],"/Users/nm/works/prototype/quick-share/frontend/src/router/index.js",[],"/Users/nm/works/prototype/quick-share/frontend/src/store/index.js",[],"/Users/nm/works/prototype/quick-share/frontend/src/views/HomeView.vue",["30","31"],"<template>\n  <div class=\"home\">\n    <div class=\"container\">\n      <h1 class=\"title\">Quick Share</h1>\n      \n      <!-- 방 만들기 영역 -->\n      <div class=\"room-controls\">\n        <div class=\"input-group\">\n          <input\n            v-model=\"roomCode\"\n            placeholder=\"방 코드 입력 (6자리)\"\n            maxlength=\"6\"\n            pattern=\"\\d*\"\n            @input=\"validateInput\"\n          />\n          <input\n            v-model=\"userName\"\n            placeholder=\"이름 입력\"\n            maxlength=\"20\"\n          />\n        </div>\n        <button\n          @click=\"handleRoom\"\n          :disabled=\"(roomCode && !isValidCode) || !userName\"\n        >\n          {{ isValidCode ? '방 만들기/참여하기' : '새로운 방 만들기' }}\n        </button>\n      </div>\n      \n      <!-- 방 들어가기 영역 -->\n      <div class=\"room-join\">\n        <div class=\"input-group\">\n          <input\n            v-model=\"joinRoomCode\"\n            placeholder=\"참여할 방 코드 입력\"\n            maxlength=\"6\"\n            pattern=\"\\d*\"\n            @input=\"validateJoinInput\"\n          />\n          <input\n            v-model=\"joinUserName\"\n            placeholder=\"이름 입력\"\n            maxlength=\"20\"\n          />\n        </div>\n        <button\n          @click=\"joinRoom\"\n          :disabled=\"!isValidJoinCode || !joinUserName\"\n        >\n          방 들어가기\n        </button>\n      </div>\n      \n      <div v-if=\"error\" class=\"error-message\">\n        {{ error }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\n// axios 인스턴스 생성\nconst api = axios.create({\n  baseURL: `${process.env.VUE_APP_API_URL}/api`,\n  timeout: 5000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\nexport default {\n  name: 'HomeView',\n  data() {\n    return {\n      roomCode: '',\n      userName: '',\n      joinRoomCode: '',\n      joinUserName: '',\n      error: ''\n    }\n  },\n  created() {\n    // 로컬 스토리지에서 이전에 사용한 이름 가져오기\n    const savedUserName = localStorage.getItem('userName');\n    if (savedUserName) {\n      this.userName = savedUserName;\n      this.joinUserName = savedUserName;\n    }\n  },\n  computed: {\n    isValidCode() {\n      return /^\\d{6}$/.test(this.roomCode);\n    },\n    isValidJoinCode() {\n      return /^\\d{6}$/.test(this.joinRoomCode);\n    }\n  },\n  methods: {\n    validateInput() {\n      this.roomCode = this.roomCode.replace(/[^\\d]/g, '');\n    },\n    validateJoinInput() {\n      this.joinRoomCode = this.joinRoomCode.replace(/[^\\d]/g, '');\n    },\n    async handleRoom() {\n      if (!this.userName.trim()) {\n        this.showError('이름을 입력해주세요');\n        return;\n      }\n      \n      this.error = '';\n      \n      // 이름 저장\n      localStorage.setItem('userName', this.userName);\n\n      try {\n        if (!this.roomCode) {\n          // 새로운 방 생성 (방 코드 없을 때)\n          const response = await api.post('/rooms', { userName: this.userName });\n          if (response.data && response.data.roomCode) {\n            this.saveRecentRoom(response.data.roomCode);\n            this.navigateToRoom(response.data.roomCode);\n          }\n        } else if (this.isValidCode) {\n          // 6자리 숫자를 입력했을 때 방 참여\n          const response = await api.post(`/rooms/${this.roomCode}`, { userName: this.userName });\n          if (response.data) {\n            this.saveRecentRoom(this.roomCode);\n            this.navigateToRoom(this.roomCode);\n          }\n        }\n      } catch (error) {\n        if (error.response) {\n          this.showError(error.response.data.message || '서버 오류가 발생했습니다.');\n        } else if (error.request) {\n          this.showError('서버에 연결할 수 없습니다.');\n        } else {\n          this.showError('알 수 없는 오류가 발생했습니다.');\n        }\n        console.error('Error:', error);\n      }\n    },\n    async joinRoom() {\n      if (!this.isValidJoinCode) {\n        this.showError('유효한 방 코드를 입력해주세요 (6자리 숫자)');\n        return;\n      }\n      \n      if (!this.joinUserName.trim()) {\n        this.showError('이름을 입력해주세요');\n        return;\n      }\n      \n      this.error = '';\n      \n      // 이름 저장\n      localStorage.setItem('userName', this.joinUserName);\n      \n      try {\n        // 방 존재 여부 확인 및 참여\n        const response = await api.post(`/rooms/${this.joinRoomCode}`, { userName: this.joinUserName });\n        if (response.data) {\n          this.saveRecentRoom(this.joinRoomCode);\n          this.navigateToRoom(this.joinRoomCode);\n        }\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          this.showError('존재하지 않는 방입니다.');\n        } else if (error.response) {\n          this.showError(error.response.data.message || '서버 오류가 발생했습니다.');\n        } else if (error.request) {\n          this.showError('서버에 연결할 수 없습니다.');\n        } else {\n          this.showError('알 수 없는 오류가 발생했습니다.');\n        }\n        console.error('Error:', error);\n      }\n    },\n    showError(message) {\n      this.error = message;\n    },\n    saveRecentRoom(roomCode) {\n      const recentRooms = JSON.parse(localStorage.getItem('recentRooms') || '[]');\n      if (!recentRooms.includes(roomCode)) {\n        recentRooms.unshift(roomCode);\n        if (recentRooms.length > 5) recentRooms.pop();\n        localStorage.setItem('recentRooms', JSON.stringify(recentRooms));\n      }\n    },\n    navigateToRoom(roomCode) {\n      // 중복 이동 오류 처리\n      this.$router.push(`/room/${roomCode}`).catch(err => {\n        if (err.name !== 'NavigationDuplicated') {\n          throw err;\n        }\n      });\n    }\n  }\n}\n</script>\n\n<style scoped>\n.home {\n  padding: 20px;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f5f7fa;\n}\n\n.container {\n  width: 100%;\n  max-width: 600px;\n  text-align: center;\n  padding: 30px;\n  background-color: white;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n  margin-bottom: 30px;\n  color: #3f51b5;\n  font-size: 2.5rem;\n}\n\n.room-controls,\n.room-join {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-bottom: 20px;\n  width: 100%;\n}\n\n.input-group {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  width: 100%;\n}\n\ninput {\n  width: 100%;\n  padding: 12px;\n  font-size: 16px;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  transition: border-color 0.3s;\n}\n\ninput:focus {\n  border-color: #3f51b5;\n  outline: none;\n}\n\nbutton {\n  padding: 12px 20px;\n  font-size: 16px;\n  background-color: #3f51b5;\n  color: white;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n}\n\nbutton:hover {\n  background-color: #303f9f;\n}\n\nbutton:disabled {\n  background-color: #cccccc;\n  cursor: not-allowed;\n}\n\n.error-message {\n  color: #f44336;\n  margin-top: 16px;\n  padding: 10px;\n  background-color: rgba(244, 67, 54, 0.1);\n  border-radius: 8px;\n}\n\n@media (min-width: 600px) {\n  .input-group {\n    flex-direction: row;\n  }\n}\n\n@media (max-width: 600px) {\n  .container {\n    padding: 20px;\n  }\n}\n</style>\n","/Users/nm/works/prototype/quick-share/frontend/src/views/RoomView.vue",["32","33","34","35","36","37","38","39","40","41","42"],"<template>\n  <div class=\"room\">\n    <!-- 알림 표시 -->\n    <div v-if=\"notification.show\" class=\"notification\">\n      {{ notification.message }}\n    </div>\n    <div class=\"room-header\">\n      <h2>방 코드: {{ roomCode }}</h2>\n      <div class=\"expiry-timer\" :class=\"{ 'expiry-warning': expiresIn < 600 }\">\n        남은 시간: {{ formatTime(expiresIn) }}\n      </div>\n    </div>\n\n    <div class=\"room-content\">\n      <div class=\"content-panel\">\n        <!-- 파일 업로드 영역 -->\n        <div class=\"file-upload-section\">\n          <h3>파일 업로드</h3>\n\n          <!-- 드래그 앤 드롭 영역 -->\n          <div\n            class=\"drop-zone\"\n            :class=\"{ 'drop-zone-active': isDragging }\"\n            @dragover.prevent=\"onDragOver\"\n            @dragleave.prevent=\"onDragLeave\"\n            @drop.prevent=\"onDrop\"\n          >\n            <div class=\"drop-zone-content\">\n              <div class=\"drop-icon\">�</div>\n              <p>파일을 여기에 드래그하면 자동으로 업로드됩니다</p>\n              <p class=\"drop-zone-or\">또는</p>\n              <label for=\"fileInput\" class=\"file-select-button\">\n                파일 선택하기\n              </label>\n              <input\n                type=\"file\"\n                id=\"fileInput\"\n                ref=\"fileInput\"\n                @change=\"handleFileChange\"\n                class=\"file-input\"\n                style=\"display: none;\"\n              />\n            </div>\n            <div v-if=\"selectedFile\" class=\"selected-file\">\n              <span class=\"selected-file-name\">{{ selectedFile.name }}</span>\n              <button @click=\"clearSelectedFile\" class=\"clear-file-button\">✕</button>\n            </div>\n          </div>\n        </div>\n\n        <!-- 파일 목록 영역 -->\n        <div class=\"file-list-section\">\n\n          <div v-if=\"isLoading\" class=\"loading-message\">\n            파일 목록을 불러오는 중...\n          </div>\n          <div v-else-if=\"files.length === 0\" class=\"empty-message\">\n            공유된 파일이 없습니다.\n          </div>\n          <ul v-else class=\"file-list\">\n            <li\n              v-for=\"file in files\"\n              :key=\"file._uniqueKey || generateUUID()\"\n              class=\"file-item\"\n              :class=\"{ 'is-office-document': file.isOfficeDocument, 'is-selected': selectedDocument && selectedDocument.filename === file.filename }\"\n            >\n              <div class=\"file-info\">\n                <span class=\"file-name\">{{ file.originalName }}</span>\n                <span class=\"file-size\">{{ formatFileSize(file.size) }}</span>\n                <span class=\"file-date\">{{ formatDate(file.uploadedAt) }}</span>\n                <span v-if=\"file.viewCount > 0\" class=\"view-count\">{{ file.viewCount }} 명 보는 중</span>\n              </div>\n              <div class=\"file-actions\">\n                <button @click=\"downloadFile(file)\" class=\"download-button\">\n                  다운로드\n                </button>\n                <button @click=\"deleteFile(file)\" class=\"delete-button\">\n                  삭제\n                </button>\n              </div>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\nimport io from 'socket.io-client'\n\n// UUID 생성 함수\nfunction generateUUID() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = Math.random() * 16 | 0\n    const v = c === 'x' ? r : (r & 0x3 | 0x8)\n    return v.toString(16)\n  })\n}\n\nexport default {\n  name: 'RoomView',\n  data() {\n    return {\n      roomCode: this.$route.params.roomId,\n      expiresIn: 3600,\n      timerInterval: null,\n      apiUrl: process.env.VUE_APP_API_URL || 'http://localhost:3001',\n      socketUrl: process.env.VUE_APP_SOCKET_URL || 'http://localhost:3001',\n      socket: null,\n      selectedFile: null,\n      isUploading: false,\n      uploadError: '',\n      uploadSuccess: '',\n      files: [],\n      isLoading: false,\n      userId: `user_${Date.now()}_${Math.floor(Math.random() * 1000)}`, // 임시 사용자 ID\n      hasJoinedRoom: false, // 방 참여 여부 추적\n      isDragging: false, // 드래그 앤 드롭 상태 추적\n      notification: {\n        show: false,\n        message: '',\n        timeout: null\n      }\n    }\n  },\n  async created() {\n    try {\n      // 방 참여 또는 생성 시도\n      await this.joinOrCreateRoom()\n      this.startExpiryTimer()\n      this.loadFiles()\n      this.connectSocket()\n    } catch (error) {\n      console.error('방 참여 오류:', error)\n      this.navigateToHome()\n    }\n  },\n  beforeDestroy() {\n    if (this.timerInterval) {\n      clearInterval(this.timerInterval)\n    }\n\n    // Socket.IO 연결 해제\n    if (this.socket) {\n      this.socket.disconnect()\n    }\n  },\n  methods: {\n    async joinOrCreateRoom() {\n      try {\n        // 방 참여 시도\n        const response = await axios.post(`${this.apiUrl}/api/rooms/${this.roomCode}`)\n        this.expiresIn = response.data.expiresIn || 3600\n\n        // 처음 참여하는 경우에만 알림 표시\n        if (!this.hasJoinedRoom) {\n          this.showNotification('방에 성공적으로 참여했습니다.')\n          this.hasJoinedRoom = true\n        }\n      } catch (error) {\n        if (error.response && error.response.status === 404) {\n          // 방이 없는 경우, 6자리 숫자인지 확인\n          if (/^\\d{6}$/.test(this.roomCode)) {\n            // 방 생성 시도\n            try {\n              const createResponse = await axios.post(`${this.apiUrl}/api/rooms`, { roomCode: this.roomCode })\n              this.expiresIn = createResponse.data.expiresIn || 3600\n              this.showNotification('새 방이 생성되었습니다.')\n              this.hasJoinedRoom = true\n            } catch (createError) {\n              console.error('방 생성 오류:', createError)\n              throw createError\n            }\n          } else {\n            throw error\n          }\n        } else {\n          throw error\n        }\n      }\n    },\n\n    async checkRoomStatus() {\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/status`)\n        if (!response.data.active) {\n          this.navigateToHome()\n          alert('방이 만료되었습니다.')\n          return\n        }\n        this.expiresIn = response.data.expiresIn\n      } catch (error) {\n        console.error('방 상태 확인 실패:', error)\n        this.navigateToHome()\n      }\n    },\n    navigateToHome() {\n      // 중복 이동 오류 처리\n      this.$router.push('/').catch(err => {\n        if (err.name !== 'NavigationDuplicated') {\n          throw err\n        }\n      })\n    },\n    startExpiryTimer() {\n      this.timerInterval = setInterval(() => {\n        this.expiresIn--\n        if (this.expiresIn <= 0) {\n          clearInterval(this.timerInterval)\n          this.navigateToHome()\n          alert('방이 만료되었습니다.')\n        } else if (this.expiresIn % 60 === 0) {\n          // 1분마다 서버에서 실제 만료 시간 확인\n          this.checkRoomStatus()\n        }\n      }, 1000)\n    },\n    formatTime(seconds) {\n      const hours = Math.floor(seconds / 3600)\n      const minutes = Math.floor((seconds % 3600) / 60)\n      const remainingSeconds = seconds % 60\n\n      return `${hours}:${String(minutes).padStart(2, '0')}:${String(remainingSeconds).padStart(2, '0')}`\n    },\n\n    // 파일 업로드 관련 메서드\n    handleFileChange(event) {\n      this.selectedFile = event.target.files[0] || null\n      this.uploadError = ''\n      this.uploadSuccess = ''\n      \n      // 파일이 선택되면 자동으로 업로드 시작 (모바일 사용자 편의성 개선)\n      if (this.selectedFile) {\n        this.showNotification('파일 업로드 중...', 10000) // 업로드 중 알림 (최대 10초)\n        this.uploadFile()\n      }\n    },\n\n    // 드래그 앤 드롭 관련 메서드\n    onDragOver() {\n      this.isDragging = true\n    },\n\n    onDragLeave() {\n      this.isDragging = false\n    },\n\n    onDrop(event) {\n      this.isDragging = false\n\n      if (event.dataTransfer.files.length) {\n        this.selectedFile = event.dataTransfer.files[0]\n        this.uploadError = ''\n        this.uploadSuccess = ''\n\n        // 파일이 드롭되면 자동으로 업로드 시작\n        this.showNotification('파일 업로드 중...', 10000) // 업로드 중 알림 (최대 10초)\n        this.uploadFile()\n      }\n    },\n\n    clearSelectedFile() {\n      this.selectedFile = null\n      this.$refs.fileInput.value = ''\n      this.uploadError = ''\n      this.uploadSuccess = ''\n    },\n\n    async uploadFile() {\n      if (!this.selectedFile) {\n        this.uploadError = '업로드할 파일을 선택해주세요.'\n        this.showNotification('업로드할 파일을 선택해주세요.', 3000)\n        return\n      }\n\n      this.isUploading = true\n      this.uploadError = ''\n      this.uploadSuccess = ''\n\n      const formData = new FormData()\n      formData.append('file', this.selectedFile)\n\n      try {\n        const response = await axios.post(\n          `${this.apiUrl}/api/rooms/${this.roomCode}/files`,\n          formData,\n          {\n            headers: {\n              'Content-Type': 'multipart/form-data'\n            }\n          }\n        )\n\n        const successMessage = response.data.message || '파일이 성공적으로 업로드되었습니다.'\n        this.uploadSuccess = successMessage\n        this.showNotification(successMessage, 3000)\n\n        this.selectedFile = null\n        this.$refs.fileInput.value = ''\n\n        // 파일 목록 새로고침\n        this.loadFiles()\n      } catch (error) {\n        console.error('파일 업로드 오류:', error)\n        const errorMessage = error.response?.data?.message || '파일 업로드에 실패했습니다.'\n        this.uploadError = errorMessage\n        this.showNotification(errorMessage, 3000)\n      } finally {\n        this.isUploading = false\n      }\n    },\n\n    // 파일 목록 관련 메서드\n    async loadFiles() {\n      this.isLoading = true\n\n      try {\n        const response = await axios.get(`${this.apiUrl}/api/rooms/${this.roomCode}/files`)\n        const files = response.data.files || []\n\n        // 중복 파일 제거 및 고유 ID 할당\n        const filenameMap = new Map()\n\n        // 파일명으로 중복 제거\n        files.forEach(file => {\n          // 이미 동일한 파일명이 있는 경우 가장 최근 파일로 대체\n          if (!filenameMap.has(file.filename) || file.uploadedAt > filenameMap.get(file.filename).uploadedAt) {\n            filenameMap.set(file.filename, file)\n          }\n        })\n\n        // 중복이 제거된 파일 목록 가져오기\n        const uniqueFiles = Array.from(filenameMap.values())\n\n        // 각 파일에 고유 ID 할당 (이미 있는 경우 유지)\n        this.files = uniqueFiles.map(file => ({\n          ...file,\n          _uniqueKey: generateUUID() // 렌더링용 고유 키\n        }))\n      } catch (error) {\n        console.error('파일 목록 로드 오류:', error)\n        this.files = []\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    // 파일 다운로드 메서드\n    async downloadFile(file) {\n      try {\n        // 다운로드 URL 생성 (ID 사용)\n        const downloadUrl = `${this.apiUrl}/api/rooms/${this.roomCode}/files/download/${file.id}?download=true`\n\n        // axios를 사용하여 파일 다운로드\n        const response = await axios({\n          url: downloadUrl,\n          method: 'GET',\n          responseType: 'blob'\n        })\n\n        // Blob 생성\n        const blob = new Blob([response.data], { type: file.mimetype })\n\n        // 다운로드 링크 생성\n        const url = window.URL.createObjectURL(blob)\n        const link = document.createElement('a')\n        link.href = url\n        link.setAttribute('download', file.originalName)\n        document.body.appendChild(link)\n\n        // 다운로드 시작\n        link.click()\n\n        // 링크 제거\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(link)\n      } catch (error) {\n        console.error('파일 다운로드 오류:', error)\n        this.showNotification('파일 다운로드에 실패했습니다.')\n      }\n    },\n\n\n\n    // 파일 삭제 메서드\n    async deleteFile(file) {\n      if (!confirm(`파일 \"${file.originalName}\"을(를) 삭제하시겠습니까?`)) {\n        return\n      }\n\n      try {\n        const response = await axios.delete(`${this.apiUrl}/api/rooms/${this.roomCode}/files/${file.id}`)\n\n        // 파일 목록에서 삭제\n        const fileIndex = this.files.findIndex(f => f.id === file.id)\n        if (fileIndex !== -1) {\n          this.files.splice(fileIndex, 1)\n        }\n\n\n\n        this.showNotification(response.data.message || '파일이 삭제되었습니다.')\n      } catch (error) {\n        console.error('파일 삭제 오류:', error)\n        this.showNotification('파일 삭제에 실패했습니다.')\n      }\n    },\n\n    // 알림 표시 메서드\n    showNotification(message, duration = 3000) {\n      // 이전 타이머가 있는 경우 취소\n      if (this.notification.timeout) {\n        clearTimeout(this.notification.timeout)\n      }\n\n      // 알림 표시\n      this.notification.message = message\n      this.notification.show = true\n\n      // 일정 시간 후 알림 숨기기\n      this.notification.timeout = setTimeout(() => {\n        this.notification.show = false\n      }, duration)\n    },\n\n    // 파일 크기 포맷팅\n    formatFileSize(bytes) {\n      if (bytes === 0) return '0 Bytes'\n\n      const k = 1024\n      const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n      const i = Math.floor(Math.log(bytes) / Math.log(k))\n\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n    },\n\n    // 날짜 포맷팅\n    formatDate(timestamp) {\n      const date = new Date(timestamp)\n      return date.toLocaleString()\n    },\n\n    // Socket.IO 연결 관련 메서드\n    connectSocket() {\n      // Socket.IO 연결 생성\n      this.socket = io(this.socketUrl)\n\n      // 연결 이벤트\n      this.socket.on('connect', () => {\n        console.log('Socket.IO 연결 성공')\n\n        // 방에 참여\n        this.socket.emit('joinRoom', this.roomCode)\n      })\n\n      // 파일 업로드 이벤트\n      this.socket.on('fileUploaded', (data) => {\n        console.log('새 파일 업로드 알림 수신:', data)\n\n        // 파일에 고유 키 추가\n        const newFile = {\n          ...data.file,\n          _uniqueKey: generateUUID()\n        }\n\n        // 파일 목록에 새 파일 추가 (중복 방지)\n        const existingFileIndex = this.files.findIndex(file => file.filename === newFile.filename)\n\n        if (existingFileIndex !== -1) {\n          // 기존 파일의 고유 키 유지\n          newFile._uniqueKey = this.files[existingFileIndex]._uniqueKey\n          // 기존 파일 업데이트\n          this.files.splice(existingFileIndex, 1, newFile)\n        } else {\n          // 새 파일 추가\n          this.files.push(newFile)\n        }\n\n        // 파일 목록 정렬 (최신 업로드 순)\n        this.files.sort((a, b) => b.uploadedAt - a.uploadedAt)\n      })\n\n\n\n      // 파일 삭제 이벤트\n      this.socket.on('fileDeleted', (data) => {\n        console.log('파일 삭제 알림 수신:', data)\n\n        // 파일 목록에서 삭제\n        const fileIndex = this.files.findIndex(file =>\n          (file.id && file.id === data.id) ||\n          file.filename === data.filename\n        )\n\n        if (fileIndex !== -1) {\n          this.files.splice(fileIndex, 1)\n          this.showNotification('파일이 삭제되었습니다.')\n        }\n      })\n\n      // 연결 오류 이벤트\n      this.socket.on('connect_error', (error) => {\n        console.error('Socket.IO 연결 오류:', error)\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n:root {\n  --primary-color: #3f51b5;\n  --primary-light: #757de8;\n  --primary-dark: #002984;\n  --secondary-color: #ff4081;\n  --secondary-light: #ff79b0;\n  --secondary-dark: #c60055;\n  --text-on-primary: #ffffff;\n  --text-on-secondary: #ffffff;\n  --background-color: #f5f7fa;\n  --surface-color: #ffffff;\n  --error-color: #f44336;\n  --success-color: #4caf50;\n  --warning-color: #ff9800;\n  --info-color: #2196f3;\n}\n\n.room {\n  padding: 20px;\n  background-color: var(--background-color);\n  min-height: 100vh;\n  font-family: 'Roboto', 'Noto Sans KR', sans-serif;\n}\n\n.room-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px 24px;\n  background-color: var(--primary-color);\n  color: var(--text-on-primary);\n  margin-bottom: 24px;\n  border-radius: 12px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: all 0.3s ease;\n}\n\n.room-header h2 {\n  margin: 0;\n  font-size: 1.5rem;\n  font-weight: 500;\n}\n\n.expiry-timer {\n  font-family: 'Roboto Mono', monospace;\n  padding: 8px 12px;\n  border-radius: 20px;\n  background-color: rgba(255, 255, 255, 0.2);\n  color: var(--text-on-primary);\n  font-weight: 500;\n  letter-spacing: 1px;\n  transition: all 0.3s ease;\n}\n\n.expiry-warning {\n  background-color: var(--error-color);\n  color: var(--text-on-secondary);\n  animation: pulse 2s infinite;\n  box-shadow: 0 0 10px rgba(244, 67, 54, 0.5);\n}\n\n.room-content {\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 24px;\n  transition: all 0.3s ease;\n}\n\n.content-panel {\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n}\n\n.file-upload-section,\n.file-list-section {\n  background-color: var(--surface-color);\n  padding: 24px;\n  border-radius: 12px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n  transition: all 0.3s ease;\n}\n\n.file-upload-section h3,\n.file-list-section h3 {\n  margin-top: 0;\n  margin-bottom: 16px;\n  color: var(--primary-color);\n  font-size: 1.25rem;\n  font-weight: 500;\n  display: flex;\n  align-items: center;\n}\n\n.file-upload-section h3::before,\n.file-list-section h3::before {\n  content: '';\n  display: inline-block;\n  width: 4px;\n  height: 18px;\n  background-color: var(--primary-color);\n  margin-right: 8px;\n  border-radius: 2px;\n}\n\n.upload-form {\n  display: flex;\n  margin-top: 16px;\n  margin-bottom: 16px;\n  position: relative;\n}\n\n.drop-zone {\n  border: 2px dashed #e0e0e0;\n  border-radius: 12px;\n  padding: 30px 20px;\n  text-align: center;\n  margin-bottom: 20px;\n  transition: all 0.3s ease;\n  background-color: #f9f9f9;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n}\n\n.drop-zone::after {\n  content: '파일을 여기에 드롭하면 자동으로 업로드됩니다';\n  position: absolute;\n  bottom: 10px;\n  left: 0;\n  right: 0;\n  text-align: center;\n  font-size: 12px;\n  color: #757575;\n  opacity: 0.7;\n}\n\n.drop-zone:hover {\n  border-color: #2ecc71;\n  background-color: rgba(46, 204, 113, 0.05);\n}\n\n.drop-zone-active {\n  border-color: #2ecc71;\n  background-color: rgba(46, 204, 113, 0.1);\n  box-shadow: 0 0 15px rgba(46, 204, 113, 0.3);\n  transform: scale(1.01);\n}\n\n.drop-zone-content {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.drop-icon {\n  font-size: 48px;\n  margin-bottom: 16px;\n  color: #757575;\n}\n\n.drop-zone p {\n  margin: 8px 0;\n  color: #757575;\n  font-size: 16px;\n}\n\n.drop-zone-or {\n  margin: 12px 0;\n  font-size: 14px;\n  color: #9e9e9e;\n}\n\n.file-select-button {\n  display: inline-block;\n  padding: 10px 20px;\n  background-color: var(--primary-color);\n  color: white;\n  border-radius: 20px;\n  cursor: pointer;\n  font-weight: 500;\n  transition: all 0.3s ease;\n}\n\n.file-select-button:hover {\n  background-color: var(--primary-dark);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.selected-file {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background-color: #e8eaf6;\n  padding: 10px 16px;\n  border-radius: 8px;\n  margin-top: 16px;\n}\n\n.selected-file-name {\n  font-weight: 500;\n  color: #333;\n  word-break: break-all;\n  margin-right: 10px;\n}\n\n.clear-file-button {\n  background: none;\n  border: none;\n  color: #757575;\n  cursor: pointer;\n  font-size: 16px;\n  padding: 4px 8px;\n  border-radius: 50%;\n  transition: all 0.3s ease;\n}\n\n.clear-file-button:hover {\n  background-color: rgba(0, 0, 0, 0.1);\n  color: var(--error-color);\n}\n\n.error-message {\n  color: var(--error-color);\n  margin-top: 12px;\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n}\n\n.error-message::before {\n  content: '⚠️';\n  margin-right: 6px;\n}\n\n.success-message {\n  color: var(--success-color);\n  margin-top: 12px;\n  font-size: 14px;\n  display: flex;\n  align-items: center;\n}\n\n.success-message::before {\n  content: '✅';\n  margin-right: 6px;\n}\n\n.refresh-button {\n  padding: 8px 16px;\n  background-color: var(--info-color);\n  color: var(--text-on-primary);\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  margin-left: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  display: inline-flex;\n  align-items: center;\n  transition: all 0.3s ease;\n}\n\n.refresh-button::before {\n  content: '🔄';\n  margin-right: 6px;\n  font-size: 14px;\n}\n\n.refresh-button:hover {\n  background-color: #1976d2;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n}\n\n.loading-message,\n.empty-message {\n  margin-top: 16px;\n  color: #757575;\n  font-style: italic;\n  text-align: center;\n  padding: 24px;\n  background-color: #f5f5f5;\n  border-radius: 8px;\n}\n\n.loading-message::before {\n  content: '⏳';\n  margin-right: 8px;\n}\n\n.empty-message::before {\n  content: '📂';\n  margin-right: 8px;\n}\n\n.file-list {\n  list-style: none;\n  padding: 0;\n  margin-top: 16px;\n}\n\n.file-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 16px;\n  border: 1px solid #e0e0e0;\n  border-radius: 8px;\n  margin-bottom: 12px;\n  background-color: white;\n  transition: all 0.3s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n.file-item:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.file-item.is-office-document {\n  border-left: 4px solid var(--primary-color);\n}\n\n.file-item.is-selected {\n  background-color: #e8eaf6;\n  border-color: var(--primary-color);\n}\n\n.file-info {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n}\n\n.file-name {\n  font-weight: 500;\n  margin-bottom: 8px;\n  color: #333;\n  font-size: 16px;\n  word-break: break-all;\n}\n\n.file-size,\n.file-date {\n  font-size: 13px;\n  color: #757575;\n  margin-bottom: 4px;\n  display: flex;\n  align-items: center;\n}\n\n.file-size::before {\n  content: '📊';\n  margin-right: 6px;\n  font-size: 12px;\n}\n\n.file-date::before {\n  content: '🕒';\n  margin-right: 6px;\n  font-size: 12px;\n}\n\n.view-count {\n  font-size: 13px;\n  color: var(--primary-color);\n  background-color: #e8eaf6;\n  padding: 4px 10px;\n  border-radius: 16px;\n  display: inline-flex;\n  align-items: center;\n  margin-top: 8px;\n  font-weight: 500;\n}\n\n.view-count::before {\n  content: '👁️';\n  margin-right: 6px;\n  font-size: 12px;\n}\n\n.file-actions {\n  display: flex;\n  gap: 10px;\n}\n\n.download-button,\n.view-button {\n  padding: 8px 16px;\n  border: none;\n  border-radius: 20px;\n  cursor: pointer;\n  font-size: 14px;\n  font-weight: 500;\n  display: inline-flex;\n  align-items: center;\n  transition: all 0.3s ease;\n}\n\n.download-button {\n  background-color: var(--info-color);\n  color: var(--text-on-primary);\n}\n\n.download-button::before {\n  content: '⬇️';\n  margin-right: 6px;\n  font-size: 14px;\n}\n\n.download-button:hover {\n  background-color: #1976d2;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n}\n\n.view-button {\n  background-color: var(--success-color);\n  color: var(--text-on-primary);\n}\n\n.view-button::before {\n  content: '👁️';\n  margin-right: 6px;\n  font-size: 14px;\n}\n\n.view-button:hover {\n  background-color: #388e3c;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n}\n\n.delete-button {\n  background-color: var(--error-color);\n  color: var(--text-on-primary);\n}\n\n.delete-button::before {\n  content: '🗑️';\n  margin-right: 6px;\n  font-size: 14px;\n}\n\n.delete-button:hover {\n  background-color: #d32f2f;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);\n}\n\n\n\n@keyframes pulse {\n  0% { opacity: 1; }\n  50% { opacity: 0.5; }\n  100% { opacity: 1; }\n}\n\n.notification {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background-color: #2ecc71; /* 더 선명한 녹색 */\n  color: white;\n  padding: 16px 24px;\n  border-radius: 12px;\n  box-shadow: 0 8px 16px rgba(46, 204, 113, 0.3);\n  z-index: 1000;\n  animation: slideIn 0.3s ease-out, fadeOut 0.5s ease-in 2.5s forwards;\n  display: flex;\n  align-items: center;\n  font-weight: 500;\n  max-width: 80%;\n  border-left: 5px solid #27ae60; /* 왼쪽 테두리 추가 */\n}\n\n.notification::before {\n  content: '✅';\n  margin-right: 10px;\n  font-size: 18px;\n}\n\n@keyframes slideIn {\n  from { transform: translateX(100%); opacity: 0; }\n  to { transform: translateX(0); opacity: 1; }\n}\n\n@keyframes fadeOut {\n  from { opacity: 1; }\n  to { opacity: 0; }\n}\n\n/* 반응형 디자인 */\n@media (max-width: 992px) {\n\n  .room-header {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 10px;\n  }\n\n  .expiry-timer {\n    align-self: flex-start;\n  }\n\n  .file-actions {\n    flex-direction: column;\n    gap: 8px;\n  }\n\n  .download-button, .view-button {\n    width: 100%;\n    justify-content: center;\n  }\n}\n\n@media (max-width: 576px) {\n  .room {\n    padding: 12px;\n  }\n\n  .room-header {\n    padding: 12px 16px;\n    margin-bottom: 16px;\n  }\n\n  .file-upload-section, .file-list-section {\n    padding: 16px;\n  }\n\n  }\n\n\n@media (max-width: 576px) {\n  .room {\n    padding: 12px;\n  }\n\n  .room-header {\n    padding: 12px 16px;\n    margin-bottom: 16px;\n  }\n\n  .file-upload-section, .file-list-section {\n    padding: 16px;\n  }\n\n  .drop-zone {\n    padding: 20px 10px;\n  }\n\n  .drop-icon {\n    font-size: 36px;\n    margin-bottom: 10px;\n  }\n\n  .drop-zone p {\n    font-size: 14px;\n  }\n\n  .selected-file {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  .selected-file-name {\n    margin-bottom: 8px;\n    margin-right: 0;\n  }\n\n  .clear-file-button {\n    align-self: flex-end;\n  }\n\n  .upload-form {\n    flex-direction: column;\n  }\n\n  .file-input {\n    border-radius: 8px 8px 0 0;\n  }\n\n  .upload-button {drop-zone {\n    width: 100%;   padding: 20px 10px;\n    padding: 14px 20px;  }\n    font-size: 15px;\n  }con {\n\n  .file-item { margin-bottom: 10px;\n    flex-direction: column;  }\n    align-items: flex-start;\n  }\n\n  .file-info {\n    width: 100%;\n    margin-bottom: 12px;\n  }\n\n  .notification {\n    margin-right: 0;\n    top: 10px;\n    right: 10px;\n    left: 10px;\n    max-width: calc(100% - 20px);\n    align-self: flex-end;\n    padding: 12px 16px;\n  }\n}\n\n</style>\n",{"ruleId":"43","severity":1,"message":"44","line":142,"column":9,"nodeType":"45","messageId":"46","endLine":142,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":178,"column":9,"nodeType":"45","messageId":"46","endLine":178,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":136,"column":7,"nodeType":"45","messageId":"46","endLine":136,"endColumn":20},{"ruleId":"43","severity":1,"message":"44","line":173,"column":15,"nodeType":"45","messageId":"46","endLine":173,"endColumn":28},{"ruleId":"43","severity":1,"message":"44","line":195,"column":9,"nodeType":"45","messageId":"46","endLine":195,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":306,"column":9,"nodeType":"45","messageId":"46","endLine":306,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":343,"column":9,"nodeType":"45","messageId":"46","endLine":343,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":380,"column":9,"nodeType":"45","messageId":"46","endLine":380,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":406,"column":9,"nodeType":"45","messageId":"46","endLine":406,"endColumn":22},{"ruleId":"43","severity":1,"message":"44","line":452,"column":9,"nodeType":"45","messageId":"46","endLine":452,"endColumn":20},{"ruleId":"43","severity":1,"message":"44","line":460,"column":9,"nodeType":"45","messageId":"46","endLine":460,"endColumn":20},{"ruleId":"43","severity":1,"message":"44","line":489,"column":9,"nodeType":"45","messageId":"46","endLine":489,"endColumn":20},{"ruleId":"43","severity":1,"message":"44","line":505,"column":9,"nodeType":"45","messageId":"46","endLine":505,"endColumn":22},"no-console","Unexpected console statement.","MemberExpression","unexpected"]